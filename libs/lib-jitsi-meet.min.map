{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/../strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/../js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/../js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/../js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/../js-utils/index.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/../events/events.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/../sdp-transform/lib/index.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/../webpack/buildin/global.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/../sdp/sdp.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/../lodash.clonedeep/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/../process/browser.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/../lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/../js-utils/node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/../webpack/buildin/module.js","webpack://JitsiMeetJS/../sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/../bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/../rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/../async/lib/async.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/TalkMutedDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedNotification.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/Worker.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/rttmonitor/rttmonitor.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/index.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/../webpack/buildin/amd-options.js","webpack://JitsiMeetJS/../current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/../timers-browserify/main.js","webpack://JitsiMeetJS/../setimmediate/setImmediate.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","BrowserCapabilities","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","AVATAR_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","Logger","require","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","loadCallStatsAPI","callStatsConfIDNamespace","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","dispose","size","emit","callStats","values","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getCallStatsConfID","_getAllCallStatsInstances","csInstances","statistics","cs","roomName","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","config","keepPts","rtcpFb","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createRttByRegionEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","IS_SELECTED_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","AUDIO","PRESENTER","VIDEO","usesAdapter","AVAILABLE_DEVICES_POLL_INTERVAL_TIME","OLD_GUM_DEFAULT_RESOLUTION","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevices","availableDevicesPollTimer","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafari","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","isElectron","screenShareAudio","desktopStream","chromeMediaSource","chromeMediaSourceId","bandwidth","firefox_fake_device","fake","screen","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","label","RTCUtils","Listenable","super","clearInterval","enumerateDevices","navigator","mediaDevices","then","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","getTrackID","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","devicesReceived","slice","onMediaDevicesListChanged","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","useIPv6","googIPv6","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","_newGetUserMediaWithConstraints","umDevices","_newGetDesktopMedia","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","obtainAudioAndVideoPermissions","devices","includes","_getAudioAndVideoStreams","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingExtensionExternalInstallation","desktopSharingSources","gumOptions","trackOptions","newObtainAudioAndVideoPermissions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","getTracks","applyConstraints","maybeRequestCaptureDevices","requestedCaptureDevices","autoGainControl","noiseSuppression","newGetConstraints","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","effects","isDeviceChangeAvailable","deviceType","mediaStream","release","url","revokeObjectURL","isDesktopSharingEnabled","setAudioOutputDevice","getAudioOutputDevice","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","rtcUtils","origAttachMediaStream","apply","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","mediaStreamMetaData","metaData","getSettings","RTC","conference","peerConnections","localTracks","_channel","_channelOpen","_lastN","_lastNEndpoints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","destroy","_channelOpenListener","initializeBridgeChannel","wsUrl","BridgeChannel","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","JitsiConferenceEvents","onCallEnded","setReceiverVideoConstraint","maxFrameHeight","selectEndpoints","ids","pinEndpoint","eventType","createPeerConnection","signaling","iceConfig","isP2P","getPCConstraints","abtestSuspendVideo","addPermanentProperties","supportsInsertableStreams","forceEncodedAudioInsertableStreams","forceEncodedVideoInsertableStreams","supportsSdpSemantics","sdpSemantics","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLastN","getLocalVideoTrack","localVideo","getLocalTracks","getLocalAudioTrack","localAudio","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","removeLocalTrack","pos","removeRemoteTracks","owner","removedTracks","pcRemovedTracks","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","setLastN","remoteAudioTracks","setAudioOutput","CHROME_EXTENSION_GENERIC_ERROR","CHROME_EXTENSION_INSTALLATION_ERROR","CHROME_EXTENSION_USER_GESTURE_REQUIRED","CHROME_EXTENSION_USER_CANCELED","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","FIREFOX_EXTENSION_NEEDED","GENERAL","NOT_FOUND","PERMISSION_DENIED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","getName","isOpera","isIExplorer","isNWJS","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","jitsiLocalStorage","storage","localStorage","keyName","keyValue","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","tmp","mediaindex","mid","linessrc","idx","containsSSRC","medias","mangle","newdesc","rtpmap","toJingle","thecreator","assrcline","creator","amidline","afmtpline","rtcpFbToJingle","crypto","required","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","senders","transportToJingle","sctpmap","sctpAttrs","number","setup","payloadtype","rtcpFbFromJingle","each","$","fromJingle","jingle","sessionId","groups","contents","_","content","jingle2media","sctp","streamCount","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","SETUP_FAILED","VIDEOBRIDGE_NOT_AVAILABLE","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","$getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","removeEventListener","WRONG_STATE","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","order","PENDING","ACTIVE","ENDED","wrtcFuncNames","createOffer","createAnswer","setLocalDescription","setRemoteDescription","addIceCandidate","iceConnectionFailure","signalingError","applicationLog","fabricEvent","fabricHold","fabricResume","audioMute","audioUnmute","videoPause","videoResume","fabricUsageEvent","fabricStats","fabricTerminated","screenShareStart","screenShareStop","dominantSpeaker","activeDeviceList","DEFAULT_REMOTE_USER","reportType","EVENT","MST_WITH_USERID","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","siteID","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","_callStatsUserName","_machineId","_p8","username","UsernameGenerator","generateUsername","generateCallStatsUserName","jitsiMeetId","generateJitsiMeetId","ALPHANUM","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","getConnectionPluginDefinition","base","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","serviceUrl","websocketKeepAlive","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","supportsRtx","enableLipSync","rayo","isPingSupported","_pingSupported","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","useStunTurn","p2p","getStunAndTurnCredentials","_resetState","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","_onPrivateMessage","password","JitsiConnectionEvents","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","attaching","anonymousdomain","hosts","configDomain","hostname","createRoom","onCreateResource","roomjid","muc","mucNickname","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","getSessions","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","MucConnectionPlugin","JingleConnectionPlugin","PingConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","CONN_STATUS_CHANGED","_options","_resumeRetryN","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","_deferredIQs","_status","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","Events","_clearDeferredIQs","deferred","closeWebsocket","_resumeTimeout","streamManagement","getResumeToken","intervalWithJitter","fetch","timeLeft","sendIQ2","sendBeacon","resumeToken","retryTimeout","getJitterDelay","ENVIRONMENT","chromeExtInstalled","chromeExtUpdateRequired","gumFunction","ScreenObtainer","intChromeExtPromise","desktopSharingChromeDisabled","desktopSharingChromeExtId","desktopSharingFirefoxDisabled","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","append","getWebStoreInstallUrl","initInlineInstalls","checkChromeExtInstalled","installed","updateRequired","initChromeExtension","obtainScreenFromExtension","obtainScreenOnFirefox","errorCallback","streamCallback","failCallback","obtainWebRTCScreen","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingChromeSources","streamType","onGetStreamResponse","doGetStreamFromExtensionOptions","chrome","runtime","getStream","sources","lastError","doGetStreamFromExtension","alert","handleExternalInstall","webStoreInstallUrl","checkForChromeExtensionOnInterval","checkAgain","waitInterval","retries","currentRetries","interval","waitForExtensionAfterInstall","getDisplayMedia","applyConstraintsPromise","videoTrack","extVersion","minVersion","s1","s2","n1","n2","isUpdateRequired","desktopSharingChromeMinExtVersion","g","DEFAULT_NOT_IN_LAST_N_TIMEOUT","DEFAULT_RTC_MUTE_TIMEOUT","DEFAULT_RESTORING_TIMEOUT","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","IQ_TIMEOUT","DEFAULT_MAX_STATS","JingleSessionPC","JingleSession","jingleContents","videoContents","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","enableLayerSuspension","testing","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","iceStarted","onnegotiationneeded","remoteDescription","usesUnifiedPlan","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","isSelected","setIsSelected","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","offerSdp","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","replaceTransport","jingleOfferElem","originalOffer","clone","remove","newFingerprint","sendTransportAccept","accept","responder","responderJid","videoTransferActive","newSendersValue","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","offerIq","remoteSdp","removeSsrcInfo","usesPlanB","findIndex","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","answer","offer","replaceTrack","oldTrack","newTrack","isVideoTrack","clearRecvonlySsrc","shouldRenegotiate","newLocalSDP","setMaxBitRate","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","clear","finishCallback","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","LARGE_ARRAY_SIZE","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","Uint8Array","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","getTag","isFunc","buffer","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","byteLength","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","arrayBuffer","newValue","getMapData","getValue","cache","pairs","other","ArrayBuffer","ctorString","isLength","baseKeys","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","binding","cwd","chdir","dir","umask","AudioContext","webkitAudioContext","LocalStatsCollector","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","trackHandler2Prop","addMediaStreamInactiveHandler","oninactive","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","active","getMSID","trackId","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","_destroyed","E2E_RTT_CHANGED","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","arrayTag","asyncTag","errorTag","nullTag","proxyTag","undefinedTag","typedArrayTags","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","isArg","isBuff","isType","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","othLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","isMasked","arrLength","seen","arrValue","othIndex","resIndex","arrayFilter","baseUnary","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","HASH","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","some","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","getFeatures","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_notifyVersionChanged","_identities","_features","oldVersion","ON","OFF","SIM_LAYER_1_RID","SIM_LAYER_2_RID","SIM_LAYER_3_RID","SIM_LAYER_RIDS","TPCUtils","simulcastEncodings","scaleResolutionDownBy","simulcastStreamConstraints","_ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","_getStreamEncodings","isSimulcastOn","_insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","_setSimulcastStreamConstraints","encoding","transceiverInit","sendEncodings","addTransceiver","getTransceivers","addStream","setEncodings","sender","stopped","localSSRCs","_addedStreams","_extractPrimarySSRC","getParameters","encodings","setParameters","transceivers","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","_setEffectInProgress","effect","isEnabled","_startStreamEffect","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","removeTrack","_queueSetMuted","setMuted","_setMuted","logMuteInfo","doesVideoMuteByStreamRemove","enabled","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setConference","_onByteSentStatsReceived","bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VAD_EMITTER_SAMPLE_RATE","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","_trackMuteChanged","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","children","AUDIO_PERMISSION_NAME","PERMISSION_GRANTED_STATUS","VIDEO_PERMISSION_NAME","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","isDevicePermissionGranted","supported","promises","results","every","permissionStatus","isMultipleAudioInputSupported","emitEvent","consoleTransport","globalTransports","transportIdx","globalOptions","callerInfo","disableCallerInfo","fileLocation","column","getCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","download","Blob","href","click","getRecordingResults","getFileType","DETECTION_TIMEOUT","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","allSettled","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","OPEN","colibriClass","msgPayload","jsonObject","lastN","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","MAX_CACHE_SIZE","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","supportsP2P","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","ondevicechange","supportsLocalCandidateRttStatistics","supportsRTTStatistics","supportsRtpSender","RTCRtpTransceiver","_getChromiumBasedVersion","RTCRtpSender","createEncodedVideoStreams","chromium","ua","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","reverse","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","f","isBrowser","compareVersion","isEngine","is","92","93","versionName","94","vendor","model","95","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","statsInterval","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","getStats","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","receiveBandwidth","sendBandwidth","localCandidateType","localip","remoteCandidateType","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","packetsLost","bytesReceivedNow","bytesReceivedBefore","bytesReceived","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","audioCodec","videoBitrateDownload","videoBitrateUpload","videoCodec","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localIp","networkType","currentRoundTripTime","framerateMean","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","getLocalSSRC","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","end","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","RTCRtpReceiver","getCapabilities","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","completed","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","offerOptions","offerToReceiveAudio","offerToReceiveVideo","remoteCodec","hdrExt","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","audioTransferActive","_dtmfSender","_dtmfTonesQueue","localUfrag","remoteUfrag","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","tpcUtils","updateLog","statsinterval","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","trace","what","time","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","senderVideoMaxHeight","maybeSetSenderVideoConstraints","statValue","endTime","times","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","_setVideoType","setMute","endpoints","endpointTrackMap","mediaTrack","getSSRC","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","getSSRCOwner","peerMediaInfo","getPeerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","changed","videoMedia","enforceSendRecv","transformStreamIdentifiers","prop","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","fidGroups","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","_removeStream","_handleSenderRemoveStream","doesBelong","isMediaStreamInPc","findSenderByKind","findSenderByStream","findReceiverForTrack","findSenderForTrack","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","toUnifiedPlan","mungeRemoteDescription","currentDescription","localVideoTrack","encodingsEnabledState","videoSender","aspectRatio","toPrecision","sendTones","tones","duration","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","hasCameraTrack","peerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","_fixAnswerRFC4145Setup","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","oaPromise","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","simIndex","handleLayerSuspension","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","modifyRtxSsrcs2","_transformMediaIdentifiers","pcId","streamAndTrackIDs","sessionDesc","audioMLine","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","injectRecvOnly","newPrimarySsrc","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","AuthUtil","getTokenAuthUrl","urlPattern","roleUpgrade","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","_e2eeCtx","E2EEContext","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","rttMonitor","RttMonitor","e2eping","E2ePing","setupRTCListeners","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","_talkWhileMutedDetection","TalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","_delayedIceFailed","cancel","removeXMPPListeners","onMemberLeft","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","getFromPresence","sendPrivateTextMessage","sendPrivateMessage","sendCommand","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","_setupSenderE2EEForTrack","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","setVideoMute","addAsUnmutePromises","removeAsMutePromises","getRole","isHidden","hiddenDomain","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","pinParticipant","isInteger","isVideoActive","getParticipantCount","countHidden","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","nick","statsID","botType","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_setupReceiverE2EEForTrack","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","errorMsg","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","bridgeChannelType","openBridgeChannel","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","getLogs","metadata","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","overallFeedback","detailedFeedback","remoteUserId","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedNotification","remoteID","getStatsID","pendingVideoConstraintsOnP2P","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","isEqual","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","meetingId","isE2EESupported","setE2EEKey","setKey","handleSender","handleReceiver","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","setParticipantPropertyListener","recorderSession","logObject","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","getConference","jitsiTrack","oldValue","isAudioMuted","_isMediaTypeMuted","_getFeaturesPromise","getBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","doLeave","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","members","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","getForm","form","formSubmit","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","newRole","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","onParticipantLeft","skipEvents","onMucMemberLeft","reasonSelect","isKick","membersKeys","actorSelect","actorNick","subjectText","stamp","dateParts","kickIQ","onError","onNotSupported","formsubmit","handlerIdx","getMemberRole","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","getMediaPresenceInfo","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","onMucLeft","doReject","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","openSctp","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","retry","minDelay","LastRequestTracker","_lastSuccess","stropheConnection","originalRawInput","ConnectionPlugin","jvbIceConfig","p2pIceConfig","onJingle","fromJid","ack","sess","startMuted","successTime","me","iceservers","dict","credential","char","getState","addSources","removeSources","SignalingLayer","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_queue","_processQueueTasks","_stopped","kill","task","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","errStatusCapture","PING_INTERVAL","PING_TIMEOUT","PING_THRESHOLD","PING_TIMESTAMPS_TO_KEEP","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","RAYO_XMLNS","onRayo","roomPass","callResource","StropheLogger","logIncoming","logOutgoing","SPEECH_DETECT_THRESHOLD","_audioLevel","myUserID","_eventFired","_isLocalAudioTrack","VAD_AVG_THRESHOLD","VAD_VOICE_LEVEL","PROCESS_TIME_FRAME_SPAN_MS","_processing","_scoreArray","_active","_calculateVADScore","_setActiveState","_processTimeout","VAD_NOISE_AVG_THRESHOLD","NOISY_AUDIO_LEVEL_THRESHOLD","VAD_SCORE_TRIGGER","AUDIO_LEVEL_SCORE_TRIGGER","_audioLvlArray","_calculateNoisyScore","scoreAvg","audioLevelAvg","_recordValues","avgAudioLvl","posAudioLevels","SILENCE_PERIOD_MS","_timeoutTrigger","_hasAudioInput","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_audioTrack","STATS_MESSAGE_TYPE","kSimulcastFormats","layers","MAX_TARGET_BITRATE","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_canceled","jvbConnection","jvbConnIceState","_iceFailedTimeout","kJitsiE2EE","E2EEcontext","_worker","Worker","createWorkerScript","encoder","TextEncoder","postMessage","operation","encode","receiverStreams","createEncodedAudioStreams","readableStream","writableStream","senderStreams","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","stunKeepAliveIntervalMs","PCMonitor","getStatsIntervalMs","getStatsInterval","rtts","startStatsInterval","handleCandidateRtt","rttTotal","candidateKey","responsesReceived","requestsSent","rttTotalDiff","responsesReceivedDiff","requestsResponsesDiff","pcMonitors","startPCMonitors","initialDelay","AverageStatReport","addNext","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","NUMBER_OF_LOCAL_SAMPLES","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","BEFORE_STATE","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","STATE_CHANGED","_sendJibriIQ","failureReason","oldState","displayname","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","ProxyConnectionService","jitsiConnection","otherOptions","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","clonedeep","bundle","mids","msidSemantic","semantic","current","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","resName","getLowerResolution","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isCollectingLocalStats","lineno","colno","hint","contentHint","util","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","DEFAULT_NUM_OF_LAYERS","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","TranscriptionService","Word","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","audioBlob","getWord","getBeginTime","getEndTime","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","supportsUnifiedPlan","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","endsWith","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","addIceCandidateNullSupported","nativeAddIceCandidate","fixNegotiationNeeded","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","shimRTCPeerConnection","validTurn","shimReplaceTrack","setTrack","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","preferredMediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter","shimChrome","shimFirefox","shimEdge","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","edgeShim","safariShim","adapterFactory"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 134);\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * A participant avatar has changed.\n */\nexport const AVATAR_CHANGED = 'conference.avatarChanged';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import EventEmitter from 'events';\n\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport RTPStats from './RTPStatsCollector';\n\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as StatisticsEvents from '../../service/statistics/Events';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl\n                || 'https://api.callstats.io/static/callstats-ws.min.js',\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} callStatsConfIDNamespace - A namespace to prepend the\n * callstats conference ID with.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n\n        if (!this.options.callStatsConfIDNamespace) {\n            logger.warn('\"callStatsConfIDNamespace\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this._getCallStatsConfID(),\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Constructs the CallStats conference ID based on the options currently\n * configured in this instance.\n * @return {string}\n * @private\n */\nStatistics.prototype._getCallStatsConfID = function() {\n    // The conference ID is case sensitive!!!\n    return this.options.callStatsConfIDNamespace\n        ? `${this.options.callStatsConfIDNamespace}/${this.options.roomName}`\n        : this.options.roomName;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this._getCallStatsConfID(), overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport RandomUtil from '../util/RandomUtil';\nimport browser from '../browser';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by\n     *  moving it to the beginning of the payload types\n     *  list (modifies the given mline in place).  If there\n     *  are multiple options within the same codec (multiple h264\n     *  profiles, for instance), this will prefer the first one\n     *  that is found.\n     * @param {object} videoMLine the video mline object from\n     *  an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferVideoCodec(videoMLine, codecName) {\n        let payloadType = null;\n\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\n            const rtp = videoMLine.rtp[i];\n\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                payloadType = rtp.payload;\n                break;\n            }\n        }\n        if (payloadType) {\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const payloadTypes\n                = videoMLine.payloads\n                    .toString()\n                    .split(' ')\n                    .map(p => parseInt(p, 10));\n            const payloadIndex = payloadTypes.indexOf(payloadType);\n\n            payloadTypes.splice(payloadIndex, 1);\n            payloadTypes.unshift(payloadType);\n            videoMLine.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} videoMLine the video mline object from an sdp as parsed\n     * by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     */\n    stripVideoCodec(videoMLine, codecName) {\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        const removePts = [];\n\n        for (const rtp of videoMLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                removePts.push(rtp.payload);\n            }\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = videoMLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = videoMLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other video codecs, disable the stream.\n                videoMLine.port = 0;\n                videoMLine.direction = 'inactive';\n                videoMLine.payloads = '*';\n            } else {\n                videoMLine.payloads = keepPts.join(' ');\n            }\n\n            videoMLine.rtp = videoMLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            videoMLine.fmtp = videoMLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (videoMLine.rtcpFb) {\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function() {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted'\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\n\n    IS_SELECTED_CHANGED: 'rtc.is_selected_change',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport screenObtainer from './ScreenObtainer';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 240\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nconst SS_DEFAULT_FRAME_RATE = 5;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices;\nlet availableDevicesPollTimer;\n\n/**\n * Initialize wrapper function for enumerating devices.\n * TODO: remove this, it should no longer be needed.\n *\n * @returns {?Function}\n */\nfunction initEnumerateDevicesWithCallback() {\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        return callback => {\n            navigator.mediaDevices.enumerateDevices()\n                .then(callback, () => callback([]));\n        };\n    }\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @param {bool}   options.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isSafari()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n\n        // Audio screen sharing for electron only works for screen type devices.\n        // i.e. when the user shares the whole desktop.\n        if (browser.isElectron() && options.screenShareAudio\n            && (options.desktopStream.indexOf('screen') >= 0)) {\n\n            // Provide constraints as described by the electron desktop capturer\n            // documentation here:\n            // https://www.electronjs.org/docs/api/desktop-capturer\n            constraints.audio = { mandatory: {\n                chromeMediaSource: constraints.video.mandatory.chromeMediaSource\n            } };\n\n            delete constraints.video.mandatory.chromeMediaSourceId;\n        }\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = JSON.parse(JSON.stringify(\n        options.constraints || DEFAULT_CONSTRAINTS));\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        // Use the standard audio constraints on non-chromium browsers.\n        if (browser.isFirefox() || browser.isSafari()) {\n            constraints.audio = {\n                deviceId: options.micDeviceId,\n                autoGainControl: !disableAGC && !disableAP,\n                echoCancellation: !disableAEC && !disableAP,\n                noiseSuppression: !disableNS && !disableAP\n            };\n        } else {\n            // NOTE(brian): the new-style ('advanced' instead of 'optional')\n            // doesn't seem to carry through the googXXX constraints\n            // Changing back to 'optional' here (even with video using\n            // the 'advanced' style) allows them to be passed through\n            // but also requires the device id to capture to be set in optional\n            // as sourceId otherwise the constraints are considered malformed.\n            if (!constraints.audio.optional) {\n                constraints.audio.optional = [];\n            }\n            constraints.audio.optional.push(\n                { sourceId: options.micDeviceId },\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Generates constraints for screen sharing when using getDisplayMedia.\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\n *\n * @returns {Object} - MediaTrackConstraints constraints.\n */\nfunction getTrackSSConstraints(options = {}) {\n    // we used to set height and width in the constraints, but this can lead\n    // to inconsistencies if the browser is on a lower resolution screen\n    // and we share a screen with bigger resolution, so they are now not set\n    const constraints = {\n        frameRate: SS_DEFAULT_FRAME_RATE\n    };\n    const { desktopSharingFrameRate } = options;\n\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\n        constraints.frameRate = desktopSharingFrameRate.max;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info(\n        'list of media devices has changed:',\n        availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\n * source of a video element that tries to be browser-agnostic through feature\n * checking. Note though that it was not completely clear from the predating\n * browser-specific implementations what &quot;videoSrc&quot; was because one\n * implementation of {@link RTCUtils#getVideoSrc} would return\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\n * appear to be used anywhere. Generally, the implementation will try to follow\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\n * properties of the specified <tt>element</tt> taking into account vender\n * prefixes.\n *\n * @param element the element whose video source/src is to be set to the\n * specified <tt>stream</tt>\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\n * source/src of <tt>element</tt>\n */\nfunction defaultSetVideoSrc(element, stream) {\n    // srcObject\n    let srcObjectPropertyName = 'srcObject';\n\n    if (!(srcObjectPropertyName in element)) {\n        srcObjectPropertyName = 'mozSrcObject';\n        if (!(srcObjectPropertyName in element)) {\n            srcObjectPropertyName = null;\n        }\n    }\n    if (srcObjectPropertyName) {\n        element[srcObjectPropertyName] = stream;\n\n        return;\n    }\n\n    // src\n    let src;\n\n    if (stream) {\n        src = stream.jitsiObjectURL;\n\n        // Save the created URL for stream so we can reuse it and not keep\n        // creating URLs.\n        if (!src) {\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\n        }\n    }\n    element.src = src || '';\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n\n        availableDevices = undefined;\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isChromiumBased() // this is chrome < 61\n                || browser.isReactNative()) {\n\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    defaultSetVideoSrc(element, stream);\n\n                    return element;\n                });\n\n            this.getStreamID = function({ id }) {\n                // A. MediaStreams from FF endpoints have the characters '{' and\n                // '}' that make jQuery choke.\n                // B. The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n\n            if (!MediaStream.prototype.getVideoTracks) {\n                MediaStream.prototype.getVideoTracks = function() {\n                    return this.videoTracks;\n                };\n            }\n            if (!MediaStream.prototype.getAudioTracks) {\n                MediaStream.prototype.getAudioTracks = function() {\n                    return this.audioTracks;\n                };\n            }\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this._initPCConstraints(options);\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.splice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n\n                // Use a shared callback to handle both the devicechange event\n                // and the polling implementations. This prevents duplication\n                // and works around a chrome bug (verified to occur on 68) where\n                // devicechange fires twice in a row, which can cause async post\n                // devicechange processing to collide.\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\n                    if (compareAvailableMediaDevices(pds)) {\n                        onMediaDevicesListChanged(pds);\n                    }\n                });\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        updateKnownDevices);\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        updateKnownDevices,\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     * Creates instance objects for peer connection constraints both for p2p\n     * and outside of p2p.\n     *\n     * @params {Object} options - Configuration for setting RTCUtil's instance\n     * objects for peer connection constraints.\n     * @params {boolean} options.useIPv6 - Set to true if IPv6 should be used.\n     * @params {Object} options.testing - Additional configuration for work in\n     * development.\n     * @params {Object} options.testing.forceP2PSuspendVideoRatio - True if\n     * video should become suspended if bandwidth estimation becomes low while\n     * in peer to peer connection mode.\n     */\n    _initPCConstraints(options) {\n        if (browser.isFirefox()) {\n            this.pcConstraints = {};\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\n            this.pcConstraints = { optional: [\n                { googHighStartBitrate: 0 },\n                { googPayloadPadding: true },\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true },\n                { googCpuOveruseEncodeUsage: true },\n                { googCpuUnderuseThreshold: 55 },\n                { googCpuOveruseThreshold: 85 }\n            ] };\n\n            if (options.useIPv6) {\n                // https://code.google.com/p/webrtc/issues/detail?id=2828\n                this.pcConstraints.optional.push({ googIPv6: true });\n            }\n\n            this.p2pPcConstraints\n                = JSON.parse(JSON.stringify(this.pcConstraints));\n        }\n\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @param {bool}   options.screenShareAudio - Used by electron clients to\n    * enable system audio screen sharing.\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const constraints = getConstraints(um, options);\n\n        logger.info('Get media constraints', constraints);\n\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n            .then(stream => {\n                logger.log('onUserMediaSuccess');\n                updateGrantedPermissions(um, stream);\n                resolve(stream);\n            })\n            .catch(error => {\n                logger.warn('Failed to get access to local media. '\n                    + ` ${error} ${constraints} `);\n                updateGrantedPermissions(um, undefined);\n                reject(new JitsiTrackError(error, constraints, um));\n            });\n        });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @returns {Promise}\n     */\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(umDevices, undefined);\n                    reject(new JitsiTrackError(error, constraints, umDevices));\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_newGetUserMediaWithConstraints.\n     *\n     * @param {Object} options\n     * @param {Object} options.desktopSharingExtensionExternalInstallation\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return this._getAudioAndVideoStreams(options).then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            ...options.desktopSharingExtensionExternalInstallation,\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            },\n            trackOptions: getTrackSSConstraints(options)\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = options.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = options;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions, trackOptions }\n                    = this._parseDesktopSharingOptions(options);\n\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: matchingDevice.deviceId\n                    }\n                };\n\n                return this._newGetUserMediaWithConstraints(\n                    requestedDevices, constraints)\n                    .then(stream => {\n                        const track = stream && stream.getTracks()[0];\n                        const applyConstrainsPromise\n                            = track && track.applyConstraints\n                                ? track.applyConstraints(trackOptions)\n                                : Promise.resolve();\n\n                        return applyConstrainsPromise\n                            .then(() => {\n                                return {\n                                    sourceType: 'device',\n                                    stream\n                                };\n                            });\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = options.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device =>\n                device === 'audio'\n                || (device === 'video' && browser.supportsVideo()));\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, options);\n\n            logger.info('Got media constraints: ', constraints);\n\n            return this._newGetUserMediaWithConstraints(\n                requestedCaptureDevices, constraints);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: options.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: options.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n\n        // if we have done createObjectURL, lets clean it\n        const url = mediaStream.jitsiObjectURL;\n\n        if (url) {\n            delete mediaStream.jitsiObjectURL;\n            URL.revokeObjectURL(url);\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport BridgeChannel from './BridgeChannel';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RTCUtils from './RTCUtils';\nimport Statistics from '../statistics/statistics';\nimport TraceablePeerConnection from './TraceablePeerConnection';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter,\n            effects: options.effects\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        // A flag whether we had received that the channel had opened we can\n        // get this flag out of sync if for some reason channel got closed\n        // from server, a desired behaviour so we can see errors when this\n        // happen.\n        // @private\n        // @type {boolean}\n        this._channelOpen = false;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\n         * no user is pinned.\n         * @type {string|null}\n         * @private\n         */\n        this._pinnedEndpoint = null;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n            this._updateAudioOutputForAudioTracks\n        );\n\n        RTCUtils.removeListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            this._onDeviceListChanged\n        );\n\n        this.removeListener(\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener\n        );\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(tracksInfo => {\n            if (usesNewGumFlow) {\n                return _newCreateLocalTracks(tracksInfo);\n            }\n\n            return createLocalTracks(tracksInfo, options);\n        });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(\n            peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            // Mark that channel as opened.\n            this._channelOpen = true;\n\n            // When the channel becomes available, tell the bridge about\n            // video selections so that it can do adaptive simulcast,\n            // we want the notification to trigger even if userJid\n            // is undefined, or null.\n            try {\n                this._channel.sendPinnedEndpointMessage(\n                    this._pinnedEndpoint);\n                this._channel.sendSelectedEndpointsMessage(\n                    this._selectedEndpoints);\n\n                if (typeof this._maxFrameHeight !== 'undefined') {\n                    this._channel.sendReceiverVideoConstraintMessage(\n                        this._maxFrameHeight);\n                }\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    `Cannot send selected(${this._selectedEndpoint})`\n                    + `pinned(${this._pinnedEndpoint})`\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\n                    error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener);\n            this._channelOpenListener = null;\n\n            // If setLastN was invoked before the bridge channel completed\n            // opening, apply the specified value now that the channel\n            // is open. NOTE that -1 is the default value assumed by both\n            // RTC module and the JVB.\n            if (this._lastN !== -1) {\n                this._channel.sendSetLastNMessage(this._lastN);\n            }\n        };\n\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\n            this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n            this._channelOpen = false;\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     * Elects the participant with the given id to be the pinned participant in\n     * order to always receive video for this participant (even when last n is\n     * enabled).\n     * @param {stirng} id The user id.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     */\n    pinEndpoint(id) {\n        // Cache the value if channel is missing, till we open it.\n        this._pinnedEndpoint = id;\n        if (this._channel && this._channelOpen) {\n            this._channel.sendPinnedEndpointMessage(id);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = RTC.getPCConstraints(isP2P);\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n\n        if (browser.supportsInsertableStreams()) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            iceConfig.forceEncodedAudioInsertableStreams = true;\n            iceConfig.forceEncodedVideoInsertableStreams = true;\n        }\n\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        iceConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Returns the current value for \"lastN\" - the amount of videos are going\n     * to be delivered. When set to -1 for unlimited or all available videos.\n     * @return {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\n     * (resource part of the JID). Returns array of removed tracks.\n     *\n     * @param {string} Owner The resource part of the MUC JID.\n     * @returns {JitsiRemoteTrack[]}\n     */\n    removeRemoteTracks(owner) {\n        let removedTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\n\n            removedTracks = removedTracks.concat(pcRemovedTracks);\n        }\n\n        logger.debug(\n            `Removed remote tracks for ${owner}`\n                + ` count: ${removedTracks.length}`);\n\n        return removedTracks;\n    }\n\n    /**\n     *\n     */\n    static getPCConstraints(isP2P) {\n        const pcConstraints\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\n\n        if (!pcConstraints) {\n            return {};\n        }\n\n        return JSON.parse(JSON.stringify(pcConstraints));\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channelOpen = false;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channelOpen) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * Generic error for jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_GENERIC_ERROR\n    = 'gum.chrome_extension_generic_error';\n\n/**\n * An error which indicates that the jidesha extension for Chrome is\n * failed to install.\n */\nexport const CHROME_EXTENSION_INSTALLATION_ERROR\n    = 'gum.chrome_extension_installation_error';\n\n/**\n * This error indicates that the attempt to start screensharing was initiated by\n * a script which did not originate in user gesture handler. It means that\n * you should to trigger the action again in response to a button click for\n * example.\n * @type {string}\n */\nexport const CHROME_EXTENSION_USER_GESTURE_REQUIRED\n    = 'gum.chrome_extension_user_gesture_required';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog in jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_USER_CANCELED\n    = 'gum.chrome_extension_user_canceled';\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * An error which indicates that the jidesha extension for Firefox is\n * needed to proceed with screen sharing, and that it is not installed.\n */\nexport const FIREFOX_EXTENSION_NEEDED = 'gum.firefox_extension_needed';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","/**\n * Dummy implementation of Storage interface with empty methods.\n */\nclass DummyLocalStorage {\n    /* eslint-disable no-empty-function */\n    /**\n     * Empty function\n     */\n    getItem() { }\n\n    /**\n     * Empty function\n     */\n    setItem() { }\n\n    /**\n     * Empty function\n     */\n    removeItem() { }\n\n    /**\n     * Empty function\n     */\n    key() { }\n    /* eslint-enable no-empty-function */\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends DummyLocalStorage {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n        let storage;\n\n        try {\n            storage = window.localStorage;\n        } catch (error) {\n            // do nothing\n        }\n        this.storage = storage || new DummyLocalStorage();\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this.storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName the name of the key you want to create/update.\n     * @param {string} keyValue the value you want to give the key you are\n     * creating/updating.\n     */\n    setItem(keyName, keyValue) {\n        return this.storage.setItem(keyName, keyValue);\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        return this.storage.removeItem(keyName);\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this.storage.key(i);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","export * from './avatar';\nexport * from './browser-capabilities';\nexport * from './browser-detection';\nexport * from './jitsi-local-storage';\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR]\n    = 'Failed to install Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[\n    JitsiTrackErrors.CHROME_EXTENSION_USER_GESTURE_REQUIRED]\n    = 'Failed to install Chrome extension - installations can only be initiated'\n        + ' by a user gesture.';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED]\n    = 'User canceled Chrome\\'s screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR]\n    = 'Unknown error from Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/* global $ */\n\nimport browser from '../browser';\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const self = this;\n    const mediaSSRCs = {};\n    let tmp;\n\n    for (let mediaindex = 0; mediaindex < self.media.length; mediaindex++) {\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc:');\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(self.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n        tmp.forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc-group:');\n        tmp.forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// remove iSAC and CN from SDP\nSDP.prototype.mangle = function() {\n    let i, j, lines, mline, newdesc, rtpmap;\n\n    for (i = 0; i < this.media.length; i++) {\n        lines = this.media[i].split('\\r\\n');\n        lines.pop(); // remove empty last element\n        mline = SDPUtil.parseMLine(lines.shift());\n        if (mline.media !== 'audio') {\n            continue; // eslint-disable-line no-continue\n        }\n        newdesc = '';\n        mline.fmt.length = 0;\n        for (j = 0; j < lines.length; j++) {\n            if (lines[j].substr(0, 9) === 'a=rtpmap:') {\n                rtpmap = SDPUtil.parseRTPMap(lines[j]);\n                if (rtpmap.name === 'CN' || rtpmap.name === 'ISAC') {\n                    continue; // eslint-disable-line no-continue\n                }\n                mline.fmt.push(rtpmap.id);\n            }\n            newdesc += `${lines[j]}\\r\\n`;\n        }\n        this.media[i] = `${SDPUtil.buildMLine(mline)}\\r\\n${newdesc}`;\n    }\n    this.raw = this.session + this.media.join('');\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    let i, j, k, lines, mline, rtpmap, ssrc, tmp;\n\n    // new bundle plan\n\n    lines = SDPUtil.findLines(this.session, 'a=group:');\n    if (lines.length) {\n        for (i = 0; i < lines.length; i++) {\n            tmp = lines[i].split(' ');\n            const semantics = tmp.shift().substr(8);\n\n            elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n                semantics });\n            for (j = 0; j < tmp.length; j++) {\n                elem.c('content', { name: tmp[j] }).up();\n            }\n            elem.up();\n        }\n    }\n    for (i = 0; i < this.media.length; i++) {\n        mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (SDPUtil.findLine(this.media[i], 'a=rtpmap:').length) {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (j = 0; j < mline.fmt.length; j++) {\n                rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    tmp = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (k = 0; k < tmp.length; k++) {\n                        elem.c('parameter', tmp[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n            const crypto\n                = SDPUtil.findLines(this.media[i], 'a=crypto:', this.session);\n\n            if (crypto.length) {\n                elem.c('encryption', { required: 1 });\n                crypto.forEach(\n                    line => elem.c('crypto', SDPUtil.parseCrypto(line)).up());\n                elem.up(); // end of encryption\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            lines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n            if (lines.length) {\n                for (j = 0; j < lines.length; j++) {\n                    tmp = SDPUtil.parseExtmap(lines[j]);\n                    elem.c('rtp-hdrext', {\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                        uri: tmp.uri,\n                        id: tmp.value\n                    });\n\n                    // eslint-disable-next-line max-depth\n                    if (tmp.hasOwnProperty('direction')) {\n\n                        // eslint-disable-next-line max-depth\n                        switch (tmp.direction) {\n                        case 'sendonly':\n                            elem.attrs({ senders: 'responder' });\n                            break;\n                        case 'recvonly':\n                            elem.attrs({ senders: 'initiator' });\n                            break;\n                        case 'sendrecv':\n                            elem.attrs({ senders: 'both' });\n                            break;\n                        case 'inactive':\n                            elem.attrs({ senders: 'none' });\n                            break;\n                        }\n                    }\n\n                    // TODO: handle params\n                    elem.up();\n                }\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    let tmp;\n    const self = this;\n\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', self.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        tmp = SDPUtil.parseFingerprint(line);\n        tmp.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(tmp.fingerprint);\n        delete tmp.fingerprint;\n\n        // eslint-disable-next-line no-param-reassign\n        line\n            = SDPUtil.findLine(\n                self.media[mediaindex],\n                'a=setup:',\n                self.session);\n        if (line) {\n            tmp.setup = line.substr(8);\n        }\n        elem.attrs(tmp);\n        elem.up(); // end of fingerprint\n    });\n    tmp = SDPUtil.iceparams(this.media[mediaindex], this.session);\n    if (tmp) {\n        tmp.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(tmp);\n\n        // XEP-0176\n        const lines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        if (lines.length) { // add any a=candidate lines\n            lines.forEach(line => {\n                const candidate = SDPUtil.candidateToJingle(line);\n\n                if (self.failICE) {\n                    candidate.ip = '1.1.1.1';\n                }\n                const protocol\n                    = candidate && typeof candidate.protocol === 'string'\n                        ? candidate.protocol.toLowerCase()\n                        : '';\n\n                if ((self.removeTcpCandidates\n                        && (protocol === 'tcp' || protocol === 'ssltcp'))\n                    || (self.removeUdpCandidates && protocol === 'udp')) {\n                    return;\n                }\n                elem.c('candidate', candidate).up();\n            });\n        }\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const tmp = SDPUtil.parseRTCPFB(line);\n\n        if (tmp.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: tmp.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: tmp.type\n            });\n            if (tmp.params.length > 0) {\n                elem.attrs({ 'subtype': tmp.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let media = '';\n    let tmp\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (tmp.length) {\n        media += 'a=rtcp-fb:* trr-int ';\n        if (tmp.attr('value')) {\n            media += tmp.attr('value');\n        } else {\n            media += '0';\n        }\n        media += '\\r\\n';\n    }\n    tmp = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `a=rtcp-fb:${payloadtype} ${$(this).attr('type')}`;\n        if ($(this).attr('subtype')) {\n            media += ` ${$(this).attr('subtype')}`;\n        }\n        media += '\\r\\n';\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const self = this;\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                self.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each(function() {\n        // eslint-disable-next-line no-invalid-this\n        const m = self.jingle2media($(this));\n\n        self.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('description');\n    let media = '';\n    const self = this;\n    const sctp = content.find(\n        '>transport>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    let tmp = { media: desc.attr('media') };\n\n    tmp.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        tmp.port = '0';\n    }\n    if (content.find('>transport>fingerprint').length\n            || desc.find('encryption').length) {\n        tmp.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        tmp.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        media += `m=application ${tmp.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        media += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            media += ` ${streamCount}\\r\\n`;\n        } else {\n            media += '\\r\\n';\n        }\n    } else {\n        tmp.fmt\n            = desc\n                .find('payload-type')\n                .map(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    return this.getAttribute('id');\n                })\n                .get();\n        media += `${SDPUtil.buildMLine(tmp)}\\r\\n`;\n    }\n\n    media += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        media += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n    tmp\n        = content.find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    if (tmp.length) {\n        if (tmp.attr('ufrag')) {\n            media += `${SDPUtil.buildICEUfrag(tmp.attr('ufrag'))}\\r\\n`;\n        }\n        if (tmp.attr('pwd')) {\n            media += `${SDPUtil.buildICEPwd(tmp.attr('pwd'))}\\r\\n`;\n        }\n        tmp.find('>fingerprint').each(function() {\n            /* eslint-disable no-invalid-this */\n            // FIXME: check namespace at some point\n            media += `a=fingerprint:${this.getAttribute('hash')}`;\n            media += ` ${$(this).text()}`;\n            media += '\\r\\n';\n            if (this.getAttribute('setup')) {\n                media += `a=setup:${this.getAttribute('setup')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    switch (content.attr('senders')) {\n    case 'initiator':\n        media += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        media += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        media += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        media += 'a=sendrecv\\r\\n';\n        break;\n    }\n    media += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('rtcp-mux').length) {\n        media += 'a=rtcp-mux\\r\\n';\n    }\n\n    if (desc.find('encryption').length) {\n        desc.find('encryption>crypto').each(function() {\n            /* eslint-disable no-invalid-this */\n            media += `a=crypto:${this.getAttribute('tag')}`;\n            media += ` ${this.getAttribute('crypto-suite')}`;\n            media += ` ${this.getAttribute('key-params')}`;\n            if (this.getAttribute('session-params')) {\n                media += ` ${this.getAttribute('session-params')}`;\n            }\n            media += '\\r\\n';\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    desc.find('payload-type').each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `${SDPUtil.buildRTPMap(this)}\\r\\n`;\n        if ($(this).find('>parameter').length) {\n            media += `a=fmtp:${this.getAttribute('id')} `;\n            media\n                += $(this)\n                    .find('parameter')\n                    .map(function() {\n                        const name = this.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + this.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            media += '\\r\\n';\n        }\n\n        // xep-0293\n        media += self.rtcpFbFromJingle($(this), this.getAttribute('id'));\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    // xep-0293\n    media += self.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    tmp\n        = desc.find(\n            '>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media\n            += `a=extmap:${this.getAttribute('id')} ${\n                this.getAttribute('uri')}\\r\\n`;\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    content\n        .find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]'\n                + '>candidate')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            let protocol = this.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((self.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (self.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (self.failICE) {\n                this.setAttribute('ip', '1.1.1.1');\n            }\n\n            media += SDPUtil.candidateFromJingle(this);\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    content\n        .find('description>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            const semantics = this.getAttribute('semantics');\n            const ssrcs\n                = $(this)\n                    .find('>source')\n                    .map(function() {\n                        return this.getAttribute('ssrc');\n                    })\n                    .get();\n\n            if (ssrcs.length) {\n                media += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    tmp\n        = content.find(\n            'description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        const ssrc = this.getAttribute('ssrc');\n\n        // eslint-disable-next-line newline-per-chained-call\n        $(this).find('>parameter').each(function() {\n            const name = this.getAttribute('name');\n            let value = this.getAttribute('value');\n\n            value = SDPUtil.filterSpecialChars(value);\n            media += `a=ssrc:${ssrc} ${name}`;\n            if (value && value.length) {\n                media += `:${value}`;\n            }\n            media += '\\r\\n';\n        });\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that the conference setup failed.\n */\nexport const SETUP_FAILED = 'conference.setup_failed';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","\n\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 6\n    },\n    '540': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n    'qhd': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection the the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","import { getLogger } from 'jitsi-meet-logger';\nimport { jitsiLocalStorage } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = jitsiLocalStorage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                jitsiLocalStorage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            _machineId = jitsiLocalStorage.getItem('jitsiMeetId');\n            if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                jitsiLocalStorage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return jitsiLocalStorage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            jitsiLocalStorage.setItem('sessionId', sessionId);\n        } else {\n            jitsiLocalStorage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport RandomUtil from '../util/RandomUtil';\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport browser from '../browser';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheUtil from './strophe.util';\nimport PingConnectionPlugin from './strophe.ping';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheLogger from './strophe.logger';\nimport Listenable from '../util/Listenable';\nimport Caps from './Caps';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive }) {\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        if (!this.options.disableRtx && browser.supportsRtx()) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChrome() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (browser.supportsInsertableStreams()) {\n            this.caps.addFeature('https://jitsi.org/meet/e2ee');\n        }\n    }\n\n    /**\n     * Returns {@code true} if the PING functionality is supported by the server\n     * or {@code false} otherwise.\n     * @returns {boolean}\n     */\n    isPingSupported() {\n        return this._pingSupported !== false;\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED\n            || status === Strophe.Status.ATTACHED) {\n            if (this.options.useStunTurn\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\n                this.connection.jingle.getStunAndTurnCredentials();\n            }\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // Schedule ping ?\n            const pingJid = this.connection.domain;\n\n            // FIXME no need to do it again on stream resume\n            this.caps.getFeaturesAndIdentities(pingJid)\n                .then(({ features, identities }) => {\n                    if (features.has(Strophe.NS.PING)) {\n                        this._pingSupported = true;\n                        this.connection.ping.startInterval(pingJid);\n                    } else {\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\n                    }\n\n                    // check for speakerstats\n                    identities.forEach(identity => {\n                        if (identity.type === 'speakerstats') {\n                            this.speakerStatsComponentAddress = identity.name;\n                        }\n\n                        if (identity.type === 'conference_duration') {\n                            this.conferenceDurationComponentAddress = identity.name;\n                        }\n                    });\n\n                    if (this.speakerStatsComponentAddress\n                        || this.conferenceDurationComponentAddress) {\n                        this.connection.addHandler(\n                            this._onPrivateMessage.bind(this), null,\n                            'message', null, null);\n                    }\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg,\n                credentials);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        let roomjid = `${roomName}@${this.options.hosts.muc}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server. Remember to check {@link isPingSupported} before using\n     * this method.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            if (this.isPingSupported()) {\n                this.connection.ping\n                    .ping(this.connection.domain, resolve, reject, timeout);\n            } else {\n                reject('PING operation is not supported by the server');\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('ping', new PingConnectionPlugin(this));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress)) {\n            return;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\n            && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        }\n\n        return true;\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\nimport { getJitterDelay } from '../util/Retry';\n\nimport LastSuccessTracker from './StropheLastSuccess';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\n        };\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._lastSuccessTracker = new LastSuccessTracker();\n        this._lastSuccessTracker.startTracking(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        return this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED;\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        this._stropheConn._proto && this._stropheConn._proto.socket && this._stropheConn._proto.socket.close();\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        clearTimeout(this._resumeTimeout);\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccessTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(() => {\n                const url = this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n                fetch(url).catch(\n                    error => {\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n                    })\n                    .then(() => this._maybeStartWSKeepAlive());\n            }, intervalWithJitter);\n        }\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error));\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            clearTimeout(this._resumeTimeout);\n\n            // FIXME detect internet offline\n            // The retry delay will be:\n            //   1st retry: 1.5s - 3s\n            //   2nd retry: 3s - 9s\n            //   3rd retry: 3s - 27s\n            this._resumeRetryN = Math.min(3, this._resumeRetryN + 1);\n            const retryTimeout = getJitterDelay(this._resumeRetryN, 1500, 3);\n\n            logger.info(`Will try to resume the XMPP connection in ${retryTimeout}ms`);\n\n            this._resumeTimeout = setTimeout(() => {\n                logger.info('Trying to resume the XMPP connection');\n\n                const url = new URL(this._stropheConn.service);\n                let { search } = url;\n\n                search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n\n                url.search = search;\n\n                this._stropheConn.service = url.toString();\n\n                streamManagement.resume();\n            }, retryTimeout);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* global chrome, $, alert */\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\n/**\n * Indicates whether the Chrome desktop sharing extension is installed.\n * @type {boolean}\n */\nlet chromeExtInstalled = false;\n\n/**\n * Indicates whether an update of the Chrome desktop sharing extension is\n * required.\n * @type {boolean}\n */\nlet chromeExtUpdateRequired = false;\n\nlet gumFunction = null;\n\n/**\n * The error message returned by chrome when the extension is installed.\n */\nconst CHROME_NO_EXTENSION_ERROR_MSG // eslint-disable-line no-unused-vars\n    = 'Could not establish connection. Receiving end does not exist.';\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n    intChromeExtPromise: null,\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {boolean} [options.desktopSharingChromeDisabled]\n     * @param {boolean} [options.desktopSharingChromeExtId]\n     * @param {boolean} [options.desktopSharingFirefoxDisabled]\n     * @param {Function} gum GUM method\n     */\n    init(options = {\n        desktopSharingChromeDisabled: false,\n        desktopSharingChromeExtId: null,\n        desktopSharingFirefoxDisabled: false\n    }, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod(options);\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @param {object} options passed from {@link init} - check description\n     * there\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod(options) {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isChrome() || browser.isOpera()) {\n            if (browser.supportsGetDisplayMedia()\n                    && !options.desktopSharingChromeDisabled) {\n\n                return this.obtainScreenFromGetDisplayMedia;\n            } else if (options.desktopSharingChromeDisabled\n                || !options.desktopSharingChromeExtId) {\n\n                return null;\n            }\n\n            logger.info('Using Chrome extension for desktop sharing');\n            this.intChromeExtPromise\n                = initChromeExtension(options).then(() => {\n                    this.intChromeExtPromise = null;\n                });\n\n            return this.obtainScreenFromExtension;\n        } else if (browser.isFirefox()) {\n            if (options.desktopSharingFirefoxDisabled) {\n                return null;\n            } else if (browser.supportsGetDisplayMedia()) {\n                // Firefox 66 support getDisplayMedia\n                return this.obtainScreenFromGetDisplayMedia;\n            }\n\n            // Legacy Firefox\n            return this.obtainScreenOnFirefox;\n        } else if (browser.isSafari() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n\n        logger.log(\n            'Screen sharing not supported by the current browser: ',\n            browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Firefox.\n     * @param callback\n     * @param errorCallback\n     */\n    obtainScreenOnFirefox(options, callback, errorCallback) {\n        obtainWebRTCScreen(options.gumOptions, callback, errorCallback);\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources\n                        || this.options.desktopSharingChromeSources\n                },\n                (streamId, streamType, screenShareAudio = false) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType,\n                                screenShareAudio\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Asks Chrome extension to call chooseDesktopMedia and gets chrome\n     * 'desktop' stream for returned stream token.\n     */\n    obtainScreenFromExtension(options, streamCallback, failCallback) {\n        if (this.intChromeExtPromise !== null) {\n            this.intChromeExtPromise.then(() => {\n                this.obtainScreenFromExtension(\n                    options, streamCallback, failCallback);\n            });\n\n            return;\n        }\n\n        const {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources\n        } = this.options;\n\n        const {\n            gumOptions\n        } = options;\n\n        const doGetStreamFromExtensionOptions = {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources:\n                options.desktopSharingSources || desktopSharingChromeSources,\n            gumOptions\n        };\n\n        if (chromeExtInstalled) {\n            doGetStreamFromExtension(\n                doGetStreamFromExtensionOptions,\n                streamCallback,\n                failCallback);\n        } else {\n            if (chromeExtUpdateRequired) {\n                /* eslint-disable no-alert */\n                alert(\n                    'Jitsi Desktop Streamer requires update. '\n                    + 'Changes will take effect after next Chrome restart.');\n\n                /* eslint-enable no-alert */\n            }\n\n            this.handleExternalInstall(options, streamCallback,\n                failCallback);\n        }\n    },\n\n    /* eslint-disable max-params */\n\n    handleExternalInstall(options, streamCallback, failCallback, e) {\n        const webStoreInstallUrl = getWebStoreInstallUrl(this.options);\n\n        options.listener('waitingForExtension', webStoreInstallUrl);\n        this.checkForChromeExtensionOnInterval(options, streamCallback,\n            failCallback, e);\n    },\n\n    /* eslint-enable max-params */\n\n    checkForChromeExtensionOnInterval(options, streamCallback, failCallback) {\n        if (options.checkAgain() === false) {\n            failCallback(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR));\n\n            return;\n        }\n        waitForExtensionAfterInstall(this.options, options.interval, 1)\n            .then(() => {\n                chromeExtInstalled = true;\n                options.listener('extensionFound');\n                this.obtainScreenFromExtension(options,\n                    streamCallback, failCallback);\n            })\n            .catch(() => {\n                this.checkForChromeExtensionOnInterval(options,\n                    streamCallback, failCallback);\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        getDisplayMedia({ video: true,\n            audio: true })\n            .then(stream => {\n                let applyConstraintsPromise;\n\n                if (stream\n                    && stream.getTracks()\n                    && stream.getTracks().length > 0) {\n                    const videoTrack = stream.getVideoTracks()[0];\n\n                    // Apply video track constraint.\n                    if (videoTrack) {\n                        applyConstraintsPromise = videoTrack.applyConstraints(options.trackOptions);\n                    }\n                } else {\n                    applyConstraintsPromise = Promise.resolve();\n                }\n\n                applyConstraintsPromise.then(() =>\n                    callback({\n                        stream,\n                        sourceId: stream.id\n                    }));\n            })\n            .catch(() =>\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .CHROME_EXTENSION_USER_CANCELED)));\n    }\n};\n\n/**\n * Obtains a desktop stream using getUserMedia.\n * For this to work on Chrome, the\n * 'chrome://flags/#enable-usermedia-screen-capture' flag must be enabled.\n *\n * On firefox, the document's domain must be white-listed in the\n * 'media.getusermedia.screensharing.allowed_domains' preference in\n * 'about:config'.\n */\nfunction obtainWebRTCScreen(options, streamCallback, failCallback) {\n    gumFunction([ 'screen' ], options)\n        .then(stream => streamCallback({ stream }), failCallback);\n}\n\n/**\n * Constructs inline install URL for Chrome desktop streaming extension.\n * The 'chromeExtensionId' must be defined in options parameter.\n * @param options supports \"desktopSharingChromeExtId\"\n * @returns {string}\n */\nfunction getWebStoreInstallUrl(options) {\n    return (\n        `https://chrome.google.com/webstore/detail/${\n            options.desktopSharingChromeExtId}`);\n}\n\n/**\n * Checks whether an update of the Chrome extension is required.\n * @param minVersion minimal required version\n * @param extVersion current extension version\n * @returns {boolean}\n */\nfunction isUpdateRequired(minVersion, extVersion) {\n    try {\n        const s1 = minVersion.split('.');\n        const s2 = extVersion.split('.');\n\n        const len = Math.max(s1.length, s2.length);\n\n        for (let i = 0; i < len; i++) {\n            let n1 = 0,\n                n2 = 0;\n\n            if (i < s1.length) {\n                n1 = parseInt(s1[i], 10);\n            }\n            if (i < s2.length) {\n                n2 = parseInt(s2[i], 10);\n            }\n\n            if (isNaN(n1) || isNaN(n2)) {\n                return true;\n            } else if (n1 !== n2) {\n                return n1 > n2;\n            }\n        }\n\n        // will happen if both versions have identical numbers in\n        // their components (even if one of them is longer, has more components)\n        return false;\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error('Failed to parse extension version', e);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param callback\n * @param options\n */\nfunction checkChromeExtInstalled(callback, options) {\n    if (typeof chrome === 'undefined' || !chrome || !chrome.runtime) {\n        // No API, so no extension for sure\n        callback(false, false);\n\n        return;\n    }\n    chrome.runtime.sendMessage(\n        options.desktopSharingChromeExtId,\n        { getVersion: true },\n        response => {\n            if (!response || !response.version) {\n                // Communication failure - assume that no endpoint exists\n                logger.warn(\n                    'Extension not installed?: ', chrome.runtime.lastError);\n                callback(false, false);\n\n                return;\n            }\n\n            // Check installed extension version\n            const extVersion = response.version;\n\n            logger.log(`Extension version is: ${extVersion}`);\n            const updateRequired\n                = isUpdateRequired(\n                    options.desktopSharingChromeMinExtVersion,\n                    extVersion);\n\n            callback(!updateRequired, updateRequired);\n        }\n    );\n}\n\n/**\n *\n * @param options\n * @param streamCallback\n * @param failCallback\n */\nfunction doGetStreamFromExtension(options, streamCallback, failCallback) {\n    const {\n        desktopSharingChromeSources,\n        desktopSharingChromeExtId,\n        gumOptions\n    } = options;\n\n    // Sends 'getStream' msg to the extension.\n    // Extension id must be defined in the config.\n    chrome.runtime.sendMessage(\n        desktopSharingChromeExtId,\n        {\n            getStream: true,\n            sources: desktopSharingChromeSources\n        },\n        response => {\n            if (!response) {\n                // possibly re-wraping error message to make code consistent\n                const lastError = chrome.runtime.lastError;\n\n                failCallback(lastError instanceof Error\n                    ? lastError\n                    : new JitsiTrackError(\n                        JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n                        lastError));\n\n                return;\n            }\n            logger.log('Response from extension: ', response);\n            onGetStreamResponse(\n                {\n                    response,\n                    gumOptions\n                },\n                streamCallback,\n                failCallback\n            );\n        }\n    );\n}\n\n/**\n * Initializes <link rel=chrome-webstore-item /> with extension id set in\n * config.js to support inline installs. Host site must be selected as main\n * website of published extension.\n * @param options supports \"desktopSharingChromeExtId\"\n */\nfunction initInlineInstalls(options) {\n    if ($('link[rel=chrome-webstore-item]').length === 0) {\n        $('head').append('<link rel=\"chrome-webstore-item\">');\n    }\n    $('link[rel=chrome-webstore-item]').attr('href',\n        getWebStoreInstallUrl(options));\n}\n\n/**\n *\n * @param options\n *\n * @return {Promise} - a Promise resolved once the initialization process is\n * finished.\n */\nfunction initChromeExtension(options) {\n    // Initialize Chrome extension inline installs\n    initInlineInstalls(options);\n\n    return new Promise(resolve => {\n        // Check if extension is installed\n        checkChromeExtInstalled((installed, updateRequired) => {\n            chromeExtInstalled = installed;\n            chromeExtUpdateRequired = updateRequired;\n            logger.info(\n                `Chrome extension installed: ${\n                    chromeExtInstalled} updateRequired: ${\n                    chromeExtUpdateRequired}`);\n            resolve();\n        }, options);\n    });\n}\n\n/**\n * Checks \"retries\" times on every \"waitInterval\"ms whether the ext is alive.\n * @param {Object} options the options passed to ScreanObtainer.obtainStream\n * @param {int} waitInterval the number of ms between retries\n * @param {int} retries the number of retries\n * @returns {Promise} returns promise that will be resolved when the extension\n * is alive and rejected if the extension is not alive even after \"retries\"\n * checks\n */\nfunction waitForExtensionAfterInstall(options, waitInterval, retries) {\n    if (retries === 0) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        let currentRetries = retries;\n        const interval = window.setInterval(() => {\n            checkChromeExtInstalled(installed => {\n                if (installed) {\n                    window.clearInterval(interval);\n                    resolve();\n                } else {\n                    currentRetries--;\n                    if (currentRetries === 0) {\n                        reject();\n                        window.clearInterval(interval);\n                    }\n                }\n            }, options);\n        }, waitInterval);\n    });\n}\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            screenShareAudio,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.rtc.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","/* global __filename, $ */\n\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\n\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264);\n            pcOptions.preferH264 = options.preferH264;\n            pcOptions.enableLayerSuspension = options.enableLayerSuspension;\n\n            // disable simulcast for screenshare and set the max bitrate to\n            // 500Kbps if the testing flag is present in config.js.\n            if (options.testing\n                && options.testing.capScreenshareBitrate\n                && typeof options.testing.capScreenshareBitrate === 'number') {\n                pcOptions.capScreenshareBitrate\n                    = Math.random()\n                    < options.testing.capScreenshareBitrate;\n\n                // add the capScreenshareBitrate to the permanent properties so\n                // that it's included with every event that we send to the\n                // analytics backend.\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n            }\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been\n                // restored.\n                if (this.peerconnection.signalingState === 'stable') {\n                    if (this.isReconnect) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\n            if (browser.usesUnifiedPlan() && state === 'stable'\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error('onnegotiationneeded error', error);\n                        } else {\n                            logger.debug('onnegotiationneeded executed - OK');\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n\n        if (!this.isP2P && options.enableLayerSuspension) {\n            // If this is the bridge session, we'll listen for\n            // IS_SELECTED_CHANGED events and notify the peer connection\n            this.rtc.addListener(RTCEvents.IS_SELECTED_CHANGED,\n                isSelected => {\n                    this.peerconnection.setIsSelected(isSelected);\n                    logger.info('Doing local O/A due to '\n                        + 'IS_SELECTED_CHANGED event');\n                    this.modificationQueue.push(finishedCallback => {\n                        this._renegotiate()\n                            .then(finishedCallback)\n                            .catch(finishedCallback);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice\n                = SDPUtil.iceparams(\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    // start 20ms callout\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, 20);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            for (const localTrack of localTracks) {\n                this.peerconnection.addTrack(localTrack, true /* isInitiator */);\n            }\n            this.peerconnection.createOffer(this.mediaConstraints)\n                .then(offerSdp => {\n                    this.peerconnection.setLocalDescription(offerSdp)\n                        .then(() => {\n                            // NOTE that the offer is obtained from\n                            // the localDescription getter as it needs to go\n                            // though the transformation chain.\n                            this.sendSessionInitiate(\n                                this.peerconnection.localDescription.sdp);\n                            finishedCallback();\n                        }, error => {\n                            logger.error(\n                                'Failed to set local SDP', error, offerSdp);\n                            finishedCallback(error);\n                        });\n                }, error => {\n                    logger.error(\n                        'Failed to create an offer',\n                        error,\n                        this.mediaConstraints);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('invite error', error);\n                } else {\n                    logger.debug('invite executed - OK');\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\n        const workFunction = finishedCallback => {\n\n            if (localTracks) {\n                for (const track of localTracks) {\n                    this.peerconnection.addTrack(track);\n                }\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        if (this.isP2P && !this._localVideoActive) {\n                            this.sendContentModify(this._localVideoActive);\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n\n                    finishedCallback();\n                }, error => {\n                    logger.error(\n                        `Error renegotiating after setting new remote ${\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\n                        newRemoteSdp);\n\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                error ? failure(error) : success();\n            });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media.\n     * @param {boolean} videoTransferActive <tt>false</tt> to let the other peer\n     * know that we're not sending nor interested in receiving video contents.\n     * When set to <tt>true</tt> remote peer will be asked to resume video\n     * transfer.\n     * @private\n     */\n    sendContentModify(videoTransferActive) {\n        const newSendersValue = videoTransferActive ? 'both' : 'none';\n\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders: newSendersValue\n                });\n\n        logger.info(\n            `Sending content-modify, video senders: ${newSendersValue}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success');\n\n            if (options && options.reasonDescription) {\n                sessionTerminate.up()\n                    .c('text')\n                    .t(options.reasonDescription);\n            }\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info('Sending SSRC update on reconnect');\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = browser.usesPlanB()\n            ? new SDP(this.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (browser.usesPlanB()) {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            } else {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n\n                        // Change the direction to \"inactive\" only on Firefox. Audio fails on\n                        // Safari (possibly Chrome in unified plan mode) when we try to re-use inactive\n                        // m-lines due to a webkit bug.\n                        // https://bugs.webkit.org/show_bug.cgi?id=211181\n                        if (browser.isFirefox()) {\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace('a=sendonly', 'a=inactive');\n                        }\n                    }\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (browser.usesPlanB()) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        },\n                        finishedCallback /* will be called with en error */);\n                    }\n\n                    // Wait for the renegotation to be done if needed (plan-b) before adjusting\n                    // the max bitrates on the video sender.\n                    promise.then(() => {\n                        // configure max bitrate only when media is routed\n                        // through JVB. For p2p case, browser takes care of\n                        // adjusting the uplink based on the feedback it\n                        // gets from the peer.\n                        if (newTrack && !this.isP2P) {\n                            this.peerconnection.setMaxBitRate(newTrack);\n                        }\n                        finishedCallback();\n                    }, finishedCallback /* will be called with en error */);\n                })\n                .catch(err => {\n                    finishedCallback(err);\n                });\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error('Replace track error:', error);\n                        reject(error);\n                    } else {\n                        logger.info('Replace track done!');\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track);\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not\n                                // enough to fail the whole operation. It will log\n                                // an error inside.\n                                this._verifyNoSSRCChanged(\n                                    operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify(videoActive);\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(\n            `${this} queued \"content-modify\" task`\n                + `(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('\"content-modify\" failed', error);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n        });\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n\n    const self = this;\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            if (audioLevel !== self.audioLevel) {\n                self.audioLevel = animateLevel(audioLevel, self.audioLevel);\n                self.callback(self.audioLevel);\n            }\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Adds onended/oninactive handler to a MediaStream.\n * @param mediaStream a MediaStream to attach onended/oninactive handler\n * @param handler the handler\n */\nfunction addMediaStreamInactiveHandler(mediaStream, handler) {\n    mediaStream.oninactive = handler;\n}\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            addMediaStreamInactiveHandler(this.stream, undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                addMediaStreamInactiveHandler(\n                    this.stream, this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        if (this.audioLevel !== audioLevel) {\n            this.audioLevel = audioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel,\n                tpc);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\n\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.versionToCapabilities = Object.create(null);\n        this.jidToVersion = Object.create(null);\n        this.version = '';\n        this.rooms = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\n\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    addFeature(feature, submit = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    removeFeature(feature, submit = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Returns a set with the features for a participant.\n     * @param {String} jid the jid of the participant\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(jid, timeout = 5000) {\n        const user\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\n\n        if (!user || !(user.version in this.versionToCapabilities)) {\n            const node = user ? `${user.node}#${user.version}` : null;\n\n            return this._getDiscoInfo(jid, node, timeout)\n                .then(({ features, identities }) => {\n                    if (user) {\n                        const sha = generateSha(\n                            Array.from(identities),\n                            Array.from(features)\n                        );\n                        const receivedNode = `${user.node}#${sha}`;\n\n                        if (receivedNode === node) {\n                            this.versionToCapabilities[receivedNode] = features;\n\n                            return features;\n                        }\n\n                        // Check once if it has been cached asynchronously.\n                        if (this.versionToCapabilities[receivedNode]) {\n                            return this.versionToCapabilities[receivedNode];\n                        }\n\n                        logger.error(`Expected node ${node} but received ${\n                            receivedNode}`);\n\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\n                    }\n                });\n        }\n\n        return Promise.resolve(this.versionToCapabilities[user.version]);\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, timeout = 5000) {\n        return this._getDiscoInfo(jid, null, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                const features = new Set();\n                const identities = new Set();\n\n                $(response)\n                    .find('>query>feature')\n                    .each(\n                        (_, el) => features.add(el.getAttribute('var')));\n                $(response)\n                    .find('>query>identity')\n                    .each(\n                        (_, el) => identities.add({\n                            type: el.getAttribute('type'),\n                            name: el.getAttribute('name'),\n                            category: el.getAttribute('category')\n                        }));\n                resolve({\n                    features,\n                    identities });\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n        this._fixChatRoomPresenceMap(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addToPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n\n    /**\n     * Parses the \"c\" xml node from presence.\n     * @param {DOMElement} stanza the presence packet\n     */\n    _handleCaps(stanza) {\n        const from = stanza.getAttribute('from');\n        const caps = stanza.querySelector('c');\n        const version = caps.getAttribute('ver');\n        const node = caps.getAttribute('node');\n        const oldVersion = this.jidToVersion[from];\n\n        this.jidToVersion[from] = { version,\n            node };\n        if (oldVersion && oldVersion.version !== version) {\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n                from);\n        }\n\n        // return true to not remove the handler from Strophe\n        return true;\n    }\n\n    /**\n     * Removes entry from this.jidToVersion map.\n     * @param {String} jid the jid to be removed.\n     */\n    _removeJidToVersionEntry(jid) {\n        if (jid in this.jidToVersion) {\n            delete this.jidToVersion[jid];\n        }\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * @constructor\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n\n        /**\n         * The simulcast encodings that will be configured on the RTCRtpSender\n         * for the video tracks in the unified plan mode.\n         */\n        this.simulcastEncodings = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? 2500000 : 200000,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\n            },\n            {\n                active: true,\n                maxBitrate: 700000,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: 2.0\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? 200000 : 2500000,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\n            }\n        ];\n\n        /**\n         * Resolution height constraints for the simulcast encodings that\n         * are configured for the video tracks.\n         */\n        this.simulcastStreamConstraints = [];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    _ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === 'audio') {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            mLine.ssrcGroups[0].ssrcs.split(' ').forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.simulcastEncodings;\n        }\n\n        return [ { active: true } ];\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    _insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where\n        // we munge SDP for turning on simulcast. Remove this check\n        // when we move to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than the\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === 'video' && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n     * Constructs resolution height constraints for the simulcast encodings that are\n     * created for a given local video track.\n     * @param {MediaStreamTrack} track - the local video track.\n     * @returns {void}\n     */\n    _setSimulcastStreamConstraints(track) {\n        if (browser.isReactNative()) {\n            return;\n        }\n\n        const height = track.getSettings().height;\n\n        for (const encoding in this.simulcastEncodings) {\n            if (this.simulcastEncodings.hasOwnProperty(encoding)) {\n                this.simulcastStreamConstraints.push({\n                    height: height / this.simulcastEncodings[encoding].scaleResolutionDownBy,\n                    rid: this.simulcastEncodings[encoding].rid\n                });\n            }\n        }\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @returns {boolean} Returns true if the operation is successful,\n    * false otherwise.\n    */\n    addTrack(localTrack, isInitiator = true) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: 'sendrecv',\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n\n        // Construct the simulcast stream constraints for the newly added track.\n        if (localTrack.isVideoTrack() && localTrack.videoType === VideoType.CAMERA && this.pc.isSimulcastOn()) {\n            this._setSimulcastStreamConstraints(localTrack.getTrack());\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {Promise<boolean>} - Promise that resolves to false if unmute\n     * operation is successful, a reject otherwise.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n\n        // The assumption here is that the first transceiver of the specified\n        // media type is that of the local track.\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\n\n        // If the client starts with audio/video muted setting, the transceiver direction\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\n        if (transceiver.direction === 'recvonly') {\n            this.pc.peerconnection.addStream(localTrack.getOriginalStream());\n            this.setEncodings(localTrack);\n            this.pc.localTracks.set(localTrack.rtcId, localTrack);\n            transceiver.direction = 'sendrecv';\n\n            return Promise.resolve(false);\n        }\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => {\n                this.pc.localTracks.set(localTrack.rtcId, localTrack);\n\n                return Promise.resolve(false);\n            });\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {Promise<boolean>} - Promise that resolves to false if unmute\n     * operation is successful, a reject otherwise.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\n\n        return transceiver.sender.replaceTrack(null)\n            .then(() => {\n                this.pc.localTracks.delete(localTrack.rtcId);\n\n                return Promise.resolve(false);\n            });\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<false>} Promise that resolves with false as we don't want\n     * renegotiation to be triggered automatically after this operation. Renegotiation is\n     * done when the browser fires the negotiationeeded event.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n            const track = mediaType === MediaType.AUDIO\n                ? stream.getAudioTracks()[0]\n                : stream.getVideoTracks()[0];\n            const transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver.track.kind === mediaType && !t.stopped);\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`Replacing ${oldTrack} with ${newTrack} on ${this.pc}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.pc.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        this.pc._extractPrimarySSRC(ssrc));\n                });\n        } else if (oldTrack && !newTrack) {\n            if (!this.removeTrackMute(oldTrack)) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            this.pc.localTracks.delete(oldTrack.rtcId);\n            this.pc.localSSRCs.delete(oldTrack.rtcId);\n        } else if (newTrack && !oldTrack) {\n            const ssrc = this.pc.localSSRCs.get(newTrack.rtcId);\n\n            if (!this.addTrackUnmute(newTrack)) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            newTrack.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack);\n            this.pc.localTracks.set(newTrack.rtcId, newTrack);\n            this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n        }\n\n        return Promise.resolve(false);\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {false} - returns false always so that renegotiation is not automatically\n    * triggered after this operation.\n    */\n    setAudioTransferActive(active) {\n        return this.setMediaTransferActive('audio', active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     */\n    setEncodings(track) {\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.kind === track.getType());\n        const parameters = transceiver.sender.getParameters();\n\n        parameters.encodings = this._getStreamEncodings(track);\n        transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {false} - returns false always so that renegotiation is not automatically\n     * triggered after this operation\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = Array.from(this.pc.localTracks.values())\n            .filter(track => track.getType() === mediaType);\n\n        if (active) {\n            transceivers.forEach(transceiver => {\n                if (localTracks.length) {\n                    transceiver.direction = 'sendrecv';\n                    const parameters = transceiver.sender.getParameters();\n\n                    if (parameters && parameters.encodings && parameters.encodings.length) {\n                        parameters.encodings.forEach(encoding => {\n                            encoding.active = true;\n                        });\n                        transceiver.sender.setParameters(parameters);\n                    }\n                } else {\n                    transceiver.direction = 'recvonly';\n                }\n            });\n        } else {\n            transceivers.forEach(transceiver => {\n                transceiver.direction = 'inactive';\n            });\n        }\n\n        return false;\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {false} - returns false always so that renegotiation is not automatically\n    * triggered after this operation.\n    */\n    setVideoTransferActive(active) {\n        return this.setMediaTransferActive('video', active);\n    }\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport JitsiTrack from './JitsiTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCUtils from './RTCUtils';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n\n            // Safari returns an empty constraints object, construct the constraints using getSettings.\n            if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n                this._constraints = {\n                    height: track.getSettings().height,\n                    width: track.getSettings().width\n                };\n            }\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this.track = this.stream.getTracks()[0];\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        if (browser.usesUnifiedPlan()) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return conference.replaceTrack(this, this)\n                .then(() => {\n                    this._setEffectInProgress = false;\n                })\n                .catch(error => {\n                    this._setEffectInProgress = false;\n                    this._switchStreamEffect();\n                    logger.error('Failed to switch to the new stream!', error);\n                    throw error;\n                });\n        }\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n            if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        this._switchStreamEffect();\n\n        let promise = Promise.resolve();\n\n        if (this.conference) {\n            promise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.start();\n        this._isVADEmitterRunning = true;\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.stop();\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the creator's jid of the session.\n     * @param {JitsiParticipant} participant - The creator of the session.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the jid of the participant that stopped the session.\n     * @param {JitsiParticipant} participant  - The participant's jid,\n     * that stopped the session.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as MediaType from './service/RTC/MediaType';\nimport browser from './modules/browser';\nimport RTC from './modules/RTC/RTC';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport Statistics from './modules/statistics/statistics';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._grantedPermissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n        RTC.addListener(\n            RTCEvents.GRANTED_PERMISSIONS,\n            grantedPermissions =>\n                this._handleGrantedPermissions(grantedPermissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and\n        // 'microphone' permissions are implemented. (Testing for at least one\n        // of them seems sufficient).\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(() => resolve(true), () => resolve(false));\n        });\n    }\n\n    /**\n     * Updated the local granted permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} grantedPermissions - Array with the permissions\n     * which were granted.\n     */\n    _handleGrantedPermissions(grantedPermissions) {\n        this._grantedPermissions = {\n            ...this._grantedPermissions,\n            ...grantedPermissions\n        };\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._grantedPermissions) {\n                resolve(this._grantedPermissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    // Workaround on Safari for audio input device\n                    // selection to work. Safari doesn't support the\n                    // permissions query.\n                    if (browser.isSafari()) {\n                        resolve(true);\n\n                        return;\n                    }\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        // The status attribute is deprecated, and state\n                        // should be used instead, but check both for now\n                        // for backwards compatibility.\n                        const grantStatus = permissionStatus.state\n                            || permissionStatus.status;\n\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices && availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // Defer to the browser capabilities to allow exposure of the api to the\n        // consumer but prevent other files from having to import\n        // JitsiMediaDevices.\n        return browser.supportsVideo();\n    }\n}\n\nexport default new JitsiMediaDevices();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = createEmptyStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * Creates a empty MediaStream object which can be used\n * to add MediaStreamTracks to\n * @returns MediaStream\n */\nfunction createEmptyStream() {\n    if (typeof MediaStream !== 'undefined') {\n        return new MediaStream();\n    }\n    throw new Error('cannot create a clean mediaStream');\n}\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} eventEmitter EventEmitter instance.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError(\n                'At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError(\n                'Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        const jsonObject = {\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        };\n\n        this._send(jsonObject);\n        logger.log(`Channel lastN set to: ${value}`);\n    }\n\n    /**\n     * Sends a \"pinned endpoint changed\" message via the channel.\n     * @param {string} endpointId The id of the pinned endpoint.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendPinnedEndpointMessage(endpointId) {\n        logger.log(\n            'sending pinned changed notification to the bridge for endpoint ',\n            endpointId);\n\n        this._send({\n            colibriClass: 'PinnedEndpointChangedEvent',\n            pinnedEndpoint: endpointId || null\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(\n            'sending selected changed notification to the bridge for endpoints',\n            endpointIds);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log('sending a ReceiverVideoConstraint message with '\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to parse channel message as JSON: ',\n                    data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                // Endpoint ID from the Videobridge.\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\n\n                logger.info(\n                    'Channel new dominant speaker event: ',\n                    dominantSpeakerEndpoint);\n                emitter.emit(\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\n                    dominantSpeakerEndpoint);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(\n                    `Endpoint connection status changed: ${endpoint} active ? ${\n                        isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n                    endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\n                    obj.msgPayload);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs.\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info('Channel new last-n event: ',\n                    lastNEndpoints, obj);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                    lastNEndpoints, obj);\n\n                break;\n            }\n            case 'SelectedUpdateEvent': {\n                const isSelected = obj.isSelected;\n\n                logger.info(`SelectedUpdateEvent isSelected? ${isSelected}`);\n                emitter.emit(RTCEvents.IS_SELECTED_CHANGED, isSelected);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","import { getLogger } from 'jitsi-meet-logger';\nimport { BrowserDetection } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isSafari();\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return this.isChromiumBased()\n            || this.isFirefox()\n            || this.isReactNative()\n            || (this.isSafari() && !this.isVersionLessThan('12.1'));\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return (this.isFirefox() && this.isVersionLessThan('68')) || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks whether the browser supports RTPSender.\n     *\n     * @returns {boolean}\n     */\n    supportsRtpSender() {\n        return this.isFirefox() || this.isSafari();\n    }\n\n    /**\n     * Checks whether the browser supports RTX.\n     *\n     * @returns {boolean}\n     */\n    supportsRtx() {\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        return true;\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isSafari();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox()) {\n            return true;\n        }\n\n        if (this.isSafari() && typeof window.RTCRtpTransceiver !== 'undefined') {\n            // eslint-disable-next-line max-len\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n            // eslint-disable-next-line no-undef\n            return Object.keys(RTCRtpTransceiver.prototype)\n                   .indexOf('currentDirection') > -1;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        const REQUIRED_CHROME_VERSION = 61;\n\n        if (this.isChrome()) {\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\n        }\n\n        if (this.isFirefox() || this.isSafari()) {\n            return true;\n        }\n\n        if (this.isChromiumBased()) {\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow and Edge.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        return Boolean(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedVideoStreams);\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import browser from '../browser';\nimport { browsers } from 'js-utils';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\n * reported by RTCPeerConnection#getStats mapped by browser.\n */\nconst KEYS_BY_BROWSER_TYPE = {};\n\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsLost': 'packetsLost',\n    'packetsSent': 'packetsSent',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'framerateMean': 'framerateMean',\n    'ip': 'address',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'googRemoteAddress',\n    'transportType': 'googTransportType',\n    'localAddress': 'googLocalAddress',\n    'activeConnection': 'googActiveConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googCodecName': 'googCodecName',\n    'googFrameHeightReceived': 'googFrameHeightReceived',\n    'googFrameWidthReceived': 'googFrameWidthReceived',\n    'googFrameHeightSent': 'googFrameHeightSent',\n    'googFrameWidthSent': 'googFrameWidthSent',\n    'googFrameRateReceived': 'googFrameRateReceived',\n    'googFrameRateSent': 'googFrameRateSent',\n    'audioInputLevel': 'audioInputLevel',\n    'audioOutputLevel': 'audioOutputLevel',\n    'currentRoundTripTime': 'googRtt',\n    'remoteCandidateType': 'googRemoteCandidateType',\n    'localCandidateType': 'googLocalCandidateType',\n    'ip': 'ip',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(\n        peerconnection,\n        audioLevelsInterval,\n        statsInterval,\n        eventEmitter) {\n    // StatsCollector depends entirely on the format of the reports returned by\n    // RTCPeerConnection#getStats. Given that the value of\n    // browser#getName() is very unlikely to change at runtime, it\n    // makes sense to discover whether StatsCollector supports the executing\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\n    // needlessly check a \"static\" condition multiple times very very often and\n    // (2) the lack of support for the executing browser would be discovered and\n    // reported multiple times very very often too late in the execution in some\n    // totally unrelated callback.\n    /**\n     * The browser type supported by this StatsCollector. In other words, the\n     * type of the browser which initialized this StatsCollector\n     * instance.\n     * @private\n     */\n    this._browserType = browser.getName();\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\n\n    if (!keys) {\n        // eslint-disable-next-line no-throw-literal\n        throw `The browser type '${this._browserType}' isn't supported!`;\n    }\n\n    /**\n     * Whether to use the Promise-based getStats API or not.\n     * @type {boolean}\n     */\n    this._usesPromiseGetStats\n        = browser.isSafari() || browser.isFirefox();\n\n    /**\n     * The function which is to be used to retrieve the value associated in a\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\n     * browser-agnostic name/key.\n     *\n     * @function\n     * @private\n     */\n    this._getStatValue\n        = this._usesPromiseGetStats\n            ? this._defineNewGetStatValueMethod(keys)\n            : this._defineGetStatValueMethod(keys);\n\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/* eslint-enable max-params */\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    const self = this;\n\n    if (startAudioLevelStats) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            results = report;\n                        } else {\n                            results = report.result();\n                        }\n                        self.currentAudioLevelsReport = results;\n                        if (this._usesPromiseGetStats) {\n                            self.processNewAudioLevelReport();\n                        } else {\n                            self.processAudioLevelReport();\n                        }\n\n                        self.baselineAudioLevelsReport\n                            = self.currentAudioLevelsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.audioLevelsIntervalMilis\n        );\n    }\n\n    this.statsIntervalId = setInterval(\n        () => {\n            // Interval updates\n            self.peerconnection.getStats(\n                report => {\n                    let results = null;\n\n                    if (!report || !report.result\n                        || typeof report.result !== 'function') {\n                        // firefox\n                        results = report;\n                    } else {\n                        // chrome\n                        results = report.result();\n                    }\n\n                    self.currentStatsReport = results;\n                    try {\n                        if (this._usesPromiseGetStats) {\n                            self.processNewStatsReport();\n                        } else {\n                            self.processStatsReport();\n                        }\n                    } catch (e) {\n                        GlobalOnErrorHandler.callErrorHandler(e);\n                        logger.error(`Unsupported key:${e}`, e);\n                    }\n\n                    self.previousStatsReport = self.currentStatsReport;\n                },\n                error => self.errorCallback(error)\n            );\n        },\n        self.statsIntervalMilis\n    );\n};\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Define the function which retrieves the value from a specific report\n    // returned by RTCPeerConnection#getStats associated with a given\n    // browser-specific key.\n    let itemStatByKey;\n\n    switch (this._browserType) {\n    case browsers.CHROME:\n    case browsers.OPERA:\n    case browsers.NWJS:\n    case browsers.ELECTRON:\n        // TODO What about other types of browser which are based on Chrome such\n        // as NW.js? Every time we want to support a new type browser we have to\n        // go and add more conditions (here and in multiple other places).\n        // Cannot we do a feature detection instead of a browser type check? For\n        // example, if item has a stat property of type function, then it's very\n        // likely that whoever defined it wanted you to call it in order to\n        // retrieve the value associated with a specific key.\n        itemStatByKey = (item, key) => item.stat(key);\n        break;\n    case browsers.REACT_NATIVE:\n        // The implementation provided by react-native-webrtc follows the\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\n        // Array in which each element is a key-value pair.\n        itemStatByKey = function(item, key) {\n            let value;\n\n            item.values.some(pair => {\n                if (pair.hasOwnProperty(key)) {\n                    value = pair[key];\n\n                    return true;\n                }\n\n                return false;\n\n            });\n\n            return value;\n        };\n        break;\n    default:\n        itemStatByKey = (item, key) => item[key];\n    }\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => itemStatByKey(item, keyFromName(name));\n};\n\n/**\n * Obtains a stat value from given stat and converts it to a non-negative\n * number. If the value is either invalid or negative then 0 will be returned.\n * @param report\n * @param {string} name\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\n    let value = this._getStatValue(report, name);\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/* eslint-disable no-continue */\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    for (const idx in this.currentStatsReport) {\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n        const now = this.currentStatsReport[idx];\n\n        // The browser API may return \"undefined\" values in the array\n        if (!now) {\n            continue;\n        }\n\n        try {\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\n\n            if (receiveBandwidth || sendBandwidth) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(receiveBandwidth / 1000),\n                    'upload': Math.round(sendBandwidth / 1000)\n                };\n            }\n        } catch (e) { /* not supported*/ }\n\n        if (now.type === 'googCandidatePair') {\n            let active, ip, localCandidateType, localip,\n                remoteCandidateType, rtt, type;\n\n            try {\n                active = getStatValue(now, 'activeConnection');\n                if (!active) {\n                    continue;\n                }\n\n                ip = getStatValue(now, 'remoteAddress');\n                type = getStatValue(now, 'transportType');\n                localip = getStatValue(now, 'localAddress');\n                localCandidateType = getStatValue(now, 'localCandidateType');\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\n            } catch (e) { /* not supported*/ }\n            if (!ip || !type || !localip || active !== 'true') {\n                continue;\n            }\n\n            // Save the address unless it has been saved already.\n            const conferenceStatsTransport = this.conferenceStats.transport;\n\n            if (!conferenceStatsTransport.some(\n                    t =>\n                        t.ip === ip\n                            && t.type === type\n                            && t.localip === localip)) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localip,\n                    p2p: this.peerconnection.isP2P,\n                    localCandidateType,\n                    remoteCandidateType,\n                    rtt\n                });\n            }\n            continue;\n        }\n\n        if (now.type === 'candidatepair') {\n            // we need succeeded and selected pairs only\n            if (now.state !== 'succeeded' || !now.selected) {\n                continue;\n            }\n\n            const local = this.currentStatsReport[now.localCandidateId];\n            const remote = this.currentStatsReport[now.remoteCandidateId];\n\n            this.conferenceStats.transport.push({\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\n                type: local.transport,\n                localip: `${local.ipAddress}:${local.portNumber}`,\n                p2p: this.peerconnection.isP2P,\n                localCandidateType: local.candidateType,\n                remoteCandidateType: remote.candidateType\n            });\n        }\n\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.previousStatsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        // If type=\"track\", take the first SSRC from ssrcIds.\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before || !ssrc) {\n            continue;\n        }\n\n        // isRemote is available only in FF and is ignored in case of chrome\n        // according to the spec\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\n        // when isRemote is true indicates that the measurements were done at\n        // the remote endpoint and reported in an RTCP RR/XR.\n        // Fixes a problem where we are calculating local stats wrong adding\n        // the sent bytes to the local download bitrate.\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\n        // property.\n        if (now.isRemote === true || now.remoteSource === true) {\n            continue;\n        }\n\n        let ssrcStats = this.ssrc2stats.get(ssrc);\n\n        if (!ssrcStats) {\n            ssrcStats = new SsrcStats();\n            this.ssrc2stats.set(ssrc, ssrcStats);\n        }\n\n        let isDownloadStream = true;\n        let key = 'packetsReceived';\n        let packetsNow = getStatValue(now, key);\n\n        if (typeof packetsNow === 'undefined'\n            || packetsNow === null || packetsNow === '') {\n            isDownloadStream = false;\n            key = 'packetsSent';\n            packetsNow = getStatValue(now, key);\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\n                logger.warn('No packetsReceived nor packetsSent stat found');\n            }\n        }\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = this.getNonNegativeStat(before, key);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow\n            = this.getNonNegativeStat(now, 'packetsLost');\n        const packetsLostBefore\n            = this.getNonNegativeStat(before, 'packetsLost');\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        ssrcStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream\n        });\n\n        const bytesReceivedNow\n            = this.getNonNegativeStat(now, 'bytesReceived');\n        const bytesReceivedBefore\n            = this.getNonNegativeStat(before, 'bytesReceived');\n        const bytesReceived\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\n\n        let bytesSent = 0;\n\n        // TODO: clean this mess up!\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\n\n        if (typeof nowBytesTransmitted === 'number'\n            || typeof nowBytesTransmitted === 'string') {\n            nowBytesTransmitted = Number(nowBytesTransmitted);\n            if (!isNaN(nowBytesTransmitted)) {\n                byteSentStats[ssrc] = nowBytesTransmitted;\n                if (nowBytesTransmitted > 0) {\n                    bytesSent = nowBytesTransmitted\n                        - getStatValue(before, 'bytesSent');\n                }\n            }\n        }\n        bytesSent = Math.max(0, bytesSent);\n\n        const timeMs = now.timestamp - before.timestamp;\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\n\n        if (timeMs > 0) {\n            // TODO is there any reason to round here?\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\n        }\n\n        ssrcStats.addBitrate({\n            'download': bitrateReceivedKbps,\n            'upload': bitrateSentKbps\n        });\n\n        const resolution = {\n            height: null,\n            width: null\n        };\n\n        try {\n            let height, width;\n\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\n                resolution.height = height;\n                resolution.width = width;\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\n                resolution.height = height;\n                resolution.width = width;\n            }\n        } catch (e) { /* not supported*/ }\n\n        // Tries to get frame rate\n        let frameRate;\n\n        try {\n            frameRate = getStatValue(now, 'googFrameRateReceived')\n                || getStatValue(now, 'googFrameRateSent') || 0;\n        } catch (e) {\n            // if it fails with previous properties(chrome),\n            // let's try with another one (FF)\n            try {\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\n            } catch (err) { /* not supported*/ }\n        }\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n        if (resolution.height && resolution.width) {\n            ssrcStats.setResolution(resolution);\n        } else {\n            ssrcStats.setResolution(null);\n        }\n\n        let codec;\n\n        // Try to get the codec for later reporting.\n        try {\n            codec = getStatValue(now, 'googCodecName') || '';\n        } catch (e) { /* not supported*/ }\n\n        ssrcStats.setCodec(codec);\n    }\n\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec = '';\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec = '';\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec.length && videoCodec.length) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n\n    for (const idx in this.currentAudioLevelsReport) {\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n\n        const now = this.currentAudioLevelsReport[idx];\n\n        if (now.type !== 'ssrc' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.baselineAudioLevelsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before) {\n            logger.warn(`${ssrc} not enough data`);\n            continue;\n        }\n\n        if (!ssrc) {\n            if ((Date.now() - now.timestamp) < 3000) {\n                logger.warn('No ssrc: ');\n            }\n            continue;\n        }\n\n        // Audio level\n        let audioLevel;\n\n        try {\n            audioLevel\n                = getStatValue(now, 'audioInputLevel')\n                    || getStatValue(now, 'audioOutputLevel');\n        } catch (e) { /* not supported*/\n            logger.warn('Audio Levels are not available in the statistics.');\n            clearInterval(this.audioLevelsIntervalId);\n\n            return;\n        }\n\n        if (audioLevel) {\n            let isLocal;\n\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\n            if (now.type === 'ssrc') {\n                isLocal = !getStatValue(now, 'packetsReceived');\n\n            // If type=\"track\", check remoteSource boolean property.\n            } else {\n                isLocal = !now.remoteSource;\n            }\n\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\n            // 0..1 range (0 == silence). However browsers don't behave that\n            // way so we must convert it to 0..1.\n            // TODO: Can't find specs about what this value really is, but it\n            // seems to vary between 0 and around 32k.\n            audioLevel = audioLevel / 32767;\n\n            if (!(ssrc in this.audioLevelReportHistory)) {\n                this.audioLevelReportHistory[ssrc] = {\n                    isLocal,\n                    data: []\n                };\n            }\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    }\n};\n\n/* eslint-enable no-continue */\n\n/**\n * New promised based getStats report processing.\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\n * frameRate stat is missing and calculating it using framesSent,\n * gives values double the values seen in webrtc-internals.\n * https://w3c.github.io/webrtc-stats/\n */\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\n * Promised based getStats.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => item[keyFromName(name)];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing new getStats logic.\n */\nStatsCollector.prototype.processNewStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n\n        // RTCIceCandidatePairStats\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair'\n            && now.nominated\n            && now.state === 'succeeded') {\n\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate\n                = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate\n                = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            // safari currently does not provide ice candidates in stats\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\n                const localPort = getStatValue(localUsedCandidate, 'port');\n\n                const localIp = `${localIpAddress}:${localPort}`;\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(\n                        t =>\n                            t.ip === ip\n                            && t.type === type\n                            && t.localip === localIp)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localIp,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow\n                = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore\n                = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff\n                = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            if (now.type === 'inbound-rtp') {\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(\n                                    now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n\n                // RTCInboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\n                // TODO: can we use framesDecoded for frame rate, available\n                // in chrome\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(\n                                now, before, 'bytesSent')\n                });\n\n                // RTCOutboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\n                // TODO: can we use framesEncoded for frame rate, available\n                // in chrome\n            }\n\n            // FF has framerateMean out of spec\n            const framerateMean = now.framerateMean;\n\n            if (framerateMean) {\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\n            }\n\n        // track for resolution\n        // RTCVideoHandlerStats\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track') {\n\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n\n            // Tries to get frame rate\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                // we need to calculate it\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore\n                            = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            const trackIdentifier = now.trackIdentifier;\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            } else {\n                ssrcStats.setResolution(null);\n            }\n        }\n    });\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processNewAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n/**\n * End new promised based getStats processing methods.\n */\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/* global __filename, RTCSessionDescription */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport {\n    TRACK_ADDED,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RtxModifier from '../xmpp/RtxModifier';\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\nimport SDP from '../xmpp/SDP';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_BITRATE = 2500000;\nconst DESKSTOP_SHARE_RATE = 500000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\n * stream.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP.\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs.\n * @param {boolean} options.enableLayerSuspension if set to 'true', we will\n * cap the video send bitrate when we are told we have not been selected by\n * any endpoints (and therefore the non-thumbnail streams are not in use).\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: browser.usesUnifiedPlan()\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use stream events in plan-b and track events in unified plan.\n    if (browser.usesPlanB()) {\n        this.peerconnection.onaddstream\n            = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream\n            = event => this._remoteStreamRemoved(event.stream);\n    } else {\n        this.peerconnection.ontrack = event => {\n            const stream = event.streams[0];\n\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\n            stream.onremovetrack = evt => {\n                this._remoteTrackRemoved(stream, evt.track);\n            };\n        };\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            }, () => {\n\n                // empty error callback\n            });\n        }, 1000);\n    }\n\n    // Set sender video constraints when a new local video track is added\n    // to the conference or when it is unmuted.\n    this.senderVideoMaxHeight = null;\n    const maybeSetSenderVideoConstraints = track => {\n        if (track.isLocal()\n            && !track.isMuted()\n            && track.isVideoTrack()\n            && track.videoType === VideoType.CAMERA\n            && this.senderVideoMaxHeight) {\n            this.setSenderVideoConstraint(this.senderVideoMaxHeight)\n                .catch(err => {\n                    logger.error(`Settings sender video constraints failed: ${err}`);\n                });\n        }\n    };\n\n    this.rtc.conference.on(\n        TRACK_ADDED,\n        maybeSetSenderVideoConstraints);\n    this.rtc.conference.on(\n        TRACK_MUTE_CHANGED,\n        maybeSetSenderVideoConstraints);\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = browser.usesPlanB()\n        ? new SDP(this.remoteDescription.sdp)\n        : new SDP(this.peerconnection.remoteDescription.sdp);\n    let mediaLines;\n\n    if (browser.usesUnifiedPlan()) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from\n        // 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(\n            `${this} overwriting remote track for`\n                + `${ownerEndpointId} ${mediaType}`);\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        if (options.startSilent) {\n            audioMedia.direction = 'inactive';\n        } else {\n            audioMedia.direction = 'sendrecv';\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * NOTE: unlike plan B simulcast, the ssrcs in this inject ssrc-group will\n * NOT necessarily be in order of quality (low to high) because:\n * a) when translating between unified plan and plan b the order of the ssrcs\n * is not preserved and\n * b) it isn't guaranteed that firefox will give them to us in order to begin\n * with\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n            video.ssrcGroups = video.ssrcGroups || [];\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug('getRemoteDescription no remoteDescription found');\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n        logger.error(`${track} is already in ${this}`);\n\n        return;\n    }\n\n    this.localTracks.set(rtcId, track);\n    if (browser.usesUnifiedPlan() && isInitiator) {\n        return this.tpcUtils.addTrack(track, isInitiator);\n    }\n\n    const webrtcStream = track.getOriginalStream();\n\n    if (webrtcStream) {\n        this._addStream(webrtcStream);\n\n    // It's not ok for a track to not have a WebRTC stream if:\n    } else if (!browser.doesVideoMuteByStreamRemove()\n                || track.isAudioTrack()\n                || (track.isVideoTrack() && !track.isMuted())) {\n        logger.error(`${this} no WebRTC stream for: ${track}`);\n    }\n\n    // Muted video tracks do not have WebRTC stream\n    if (browser.usesPlanB() && browser.doesVideoMuteByStreamRemove()\n            && track.isVideoTrack() && track.isMuted()) {\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n        const simGroup\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n        if (simGroup) {\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\n        }\n        const fidGroups\n            = ssrcInfo.groups.filter(\n                groupInfo => groupInfo.semantics === 'FID');\n\n        if (fidGroups) {\n            const rtxSsrcMapping = new Map();\n\n            fidGroups.forEach(fidGroup => {\n                const primarySsrc = fidGroup.ssrcs[0];\n                const rtxSsrc = fidGroup.ssrcs[1];\n\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n            });\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n        }\n    }\n\n    if (browser.usesUnifiedPlan() && !browser.usesSdpMungingForSimulcast()) {\n        this.tpcUtils.setEncodings(track);\n    }\n\n    // Construct the simulcast stream constraints for the newly added track.\n    if (track.isVideoTrack() && track.videoType === VideoType.CAMERA && this.isSimulcastOn()) {\n        this.tpcUtils._setSimulcastStreamConstraints(track.getTrack());\n    }\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    if (browser.supportsRtpSender()) {\n        this._handleSenderRemoveStream(mediaStream);\n    } else {\n        this.peerconnection.removeStream(mediaStream);\n    }\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.removeTrack(localTrack);\n    }\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        if (browser.supportsRtpSender()) {\n            this._handleSenderRemoveStream(webRtcStream);\n        } else {\n            this.peerconnection.removeStream(webRtcStream);\n        }\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStream.\n *\n * @param {MediaStream} stream - The media stream used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\n    const track = stream.getTracks()[0];\n\n    if (!track) {\n        logger.error('Cannot find sender: no tracks.');\n\n        return;\n    }\n\n    // Find the right sender (for audio or video)\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack);\n    }\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        this.addTrack(newTrack);\n    }\n\n    return Promise.resolve(true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\n/**\n * Remove stream handling for browsers supporting RTPSender\n * @param stream: webrtc media stream\n */\nTraceablePeerConnection.prototype._handleSenderRemoveStream = function(\n        stream) {\n    if (!stream) {\n        // There is nothing to be changed\n        return;\n    }\n\n    const sender = this.findSenderByStream(stream);\n\n    if (sender) {\n        this.peerconnection.removeTrack(sender);\n    } else {\n        logger.log('Cannot remove tracks: no RTPSender.');\n    }\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    if (this.options.disableH264 || this.options.preferH264) {\n        const parsedSdp = transform.parse(localSdp.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        if (this.options.disableH264) {\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\n        } else {\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n        }\n\n        localSdp = new RTCSessionDescription({\n            type: localSdp.type,\n            sdp: transform.write(parsedSdp)\n        });\n\n        this.trace('setLocalDescription::postTransform (H264)',\n            dumpSDP(localSdp));\n    }\n\n    if (browser.usesPlanB()) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.setAudioTransferActive(active);\n    }\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function(localTrack) {\n    const mediaType = localTrack.type;\n\n    // No need to set max bitrates on the streams in the following cases.\n    // 1. When an audio track has been replaced.\n    // 2. When a 'camera' track is replaced in plan-b mode, since its a new sender.\n    // 3. When the config.js option for capping the SS bitrate is not enabled.\n    if ((mediaType === MediaType.AUDIO)\n        || (browser.usesPlanB() && !this.options.capScreenshareBitrate)\n        || (browser.usesPlanB() && localTrack.videoType === 'camera')) {\n        return;\n    }\n    if (!this.peerconnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\n\n        return;\n    }\n    const videoType = localTrack.videoType;\n    const trackId = localTrack.track.id;\n\n    this.peerconnection.getSenders()\n        .filter(s => s.track && s.track.id === trackId)\n        .forEach(sender => {\n            try {\n                const parameters = sender.getParameters();\n\n                if (!parameters.encodings || !parameters.encodings.length) {\n                    return;\n                }\n                logger.debug('Setting max bitrate on video stream');\n                for (const encoding in parameters.encodings) {\n                    if (parameters.encodings.hasOwnProperty(encoding)) {\n                        parameters.encodings[encoding].maxBitrate\n                            = videoType === 'desktop' && browser.usesPlanB()\n                                ? DESKSTOP_SHARE_RATE\n\n                                // In unified plan, simulcast for SS is on by default.\n                                // When simulcast is disabled through a config.js option,\n                                // we cap the bitrate on desktop and camera tracks to 2500 Kbps.\n                                : this.isSimulcastOn()\n                                    ? this.tpcUtils.simulcastEncodings[encoding].maxBitrate\n                                    : MAX_BITRATE;\n                    }\n                }\n                sender.setParameters(parameters);\n            } catch (err) {\n                logger.error('Browser does not support getParameters/setParamters '\n                    + 'or setting max bitrate on the encodings: ', err);\n            }\n        });\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    if (browser.usesPlanB()) {\n        // TODO the focus should squeze or explode the remote simulcast\n        // eslint-disable-next-line no-param-reassign\n        description = this.simulcast.mungeRemoteDescription(description);\n        this.trace(\n            'setRemoteDescription::postTransform (simulcast)',\n            dumpSDP(description));\n\n        if (this.options.preferH264) {\n            const parsedSdp = transform.parse(description.sdp);\n            const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n\n            // eslint-disable-next-line no-param-reassign\n            description = new RTCSessionDescription({\n                type: description.type,\n                sdp: transform.write(parsedSdp)\n            });\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils._insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils._ensureCorrectOrderOfSsrcs(description);\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on\n * the user preferred value. If simulcast is enabled on the peerconection, all the\n * simulcast encodings that have a resolution height lower or equal to the value\n * provided will remain active. For the non-simulcast case, video constraint is\n * applied on the track.\n * @param {number} frameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight) {\n    this.senderVideoMaxHeight = frameHeight;\n    const localVideoTrack = Array.from(this.localTracks.values()).find(t => t.isVideoTrack());\n\n    if (!localVideoTrack || localVideoTrack.isMuted() || localVideoTrack.videoType !== VideoType.CAMERA) {\n        return Promise.resolve();\n    }\n    const track = localVideoTrack.getTrack();\n\n    if (this.isSimulcastOn()) {\n        let promise = Promise.resolve();\n\n        // Check if the track constraints have been modified in p2p mode, apply\n        // the constraints that were used for creating the track if that is the case.\n        const height = localVideoTrack._constraints.height.ideal\n            ? localVideoTrack._constraints.height.ideal\n            : localVideoTrack._constraints.height;\n\n        if (track.getSettings().height !== height) {\n            promise = track.applyConstraints(localVideoTrack._constraints);\n        }\n\n        return promise\n            .then(() => {\n                // Determine the encodings that need to stay enabled based on the\n                // new frameHeight provided.\n                const encodingsEnabledState = this.tpcUtils.simulcastStreamConstraints\n                    .map(constraint => constraint.height <= frameHeight);\n                const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n                if (!videoSender) {\n                    return Promise.reject(new Error('RTCRtpSender not found for local video'));\n                }\n                const parameters = videoSender.getParameters();\n\n                if (!parameters || !parameters.encodings || !parameters.encodings.length) {\n                    return Promise.reject(new Error('RTCRtpSendParameters not found for local video track'));\n                }\n                logger.debug(`Setting max height of ${frameHeight} on local video`);\n                for (const encoding in parameters.encodings) {\n                    if (parameters.encodings.hasOwnProperty(encoding)) {\n                        parameters.encodings[encoding].active = encodingsEnabledState[encoding];\n                    }\n                }\n\n                return videoSender.setParameters(parameters);\n            });\n    }\n\n    // Apply the height constraint on the local camera track\n    const aspectRatio = (track.getSettings().width / track.getSettings().height).toPrecision(4);\n\n    logger.debug(`Setting max height of ${frameHeight} on local video`);\n\n    return track.applyConstraints(\n        {\n            aspectRatio,\n            height: {\n                ideal: frameHeight\n            }\n        });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.setVideoTransferActive(active);\n    }\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\n/**\n * Modifies the values of the setup attributes (defined by\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\n * answer in order to overcome a delay of 1 second in the connection\n * establishment between some devices and Videobridge.\n *\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\n * being prepared to respond\n * @param {SDP} answer - the SDP to modify\n * @private\n */\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\n        // It looks like Firefox doesn't agree with the fix (at least in its\n        // current implementation) because it effectively remains active even\n        // after we tell it to become passive. Apart from Firefox which I tested\n        // after the fix was deployed, I tested Chrome only. In order to prevent\n        // issues with other browsers, limit the fix to known devices for the\n        // time being.\n        return;\n    }\n\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\n    // answerer (as orchestrated by Jicofo). In accord with\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\n    // are ICE FULL agents, Videobridge will take on the controlling role and\n    // WebRTC will take on the controlled role. In accord with\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\n    // choose either the setup attribute value of setup:active or\n    // setup:passive. Chrome will by default choose setup:active because it is\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\n    // latency. The case of setup:active allows WebRTC to send a DTLS\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\n    // Unfortunately, Videobridge will be unable to respond immediately because\n    // may not have WebRTC's answer or may have not completed the ICE\n    // connectivity establishment. Even more unfortunate is that in the\n    // described scenario Chrome's DTLS implementation will insist on\n    // retransmitting its ClientHello after a second (the time is in accord\n    // with the respective RFC) and will thus cause the whole connection\n    // establishment to exceed at least 1 second. To work around Chrome's\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\n    // default choice of setup:active to setup:passive.\n    if (offer && answer\n            && offer.media && answer.media\n            && offer.media.length === answer.media.length) {\n        answer.media.forEach((a, i) => {\n            if (SDPUtil.findLine(\n                    offer.media[i],\n                    'a=setup:actpass',\n                    offer.session)) {\n                answer.media[i]\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\n            }\n        });\n        answer.raw = answer.session + answer.media.join('');\n    }\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\n/**\n * Checks if a camera track has been added to the peerconnection\n * @param {TraceablePeerConnection} peerConnection\n * @return {boolean} <tt>true</tt> if the peerconnection has\n * a camera track for its video source <tt>false</tt> otherwise.\n */\nfunction hasCameraTrack(peerConnection) {\n    return peerConnection.getLocalTracks()\n        .some(t => t.videoType === 'camera');\n}\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (browser.usesPlanB()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // configure simulcast for camera tracks always and for\n            // desktop tracks only when the testing flag for maxbitrates\n            // in config.js is disabled.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (!this.options.capScreenshareBitrate\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.supportsRtx()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\n            //  details)\n            if (!isOffer) {\n                const remoteDescription\n                    = new SDP(this.remoteDescription.sdp);\n                const localDescription = new SDP(resultSdp.sdp);\n\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: localDescription.raw\n                });\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully\n * obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain\n * stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\n    // accounting for different getStats apis, making the browser-checking-if\n    // unnecessary.\n    if (browser.isSafari() || browser.isFirefox() || browser.isReactNative()) {\n        // uses the new Promise based getStats\n        this.peerconnection.getStats()\n            .then(callback)\n            .catch(errback || (() => {\n\n                // Making sure that getStats won't fail if error callback is\n                // not passed.\n            }));\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n\n    // configure simulcast for camera tracks always and for\n    // desktop tracks only when the testing flag for maxbitrates\n    // in config.js is disabled.\n    if (this.isSimulcastOn()\n        && (!this.options.capScreenshareBitrate\n        || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx && browser.supportsRtx()) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\nconst handleLayerSuspension = function(peerConnection, isSelected) {\n    if (!peerConnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTPSender');\n\n        return;\n    }\n\n    const videoSender = peerConnection.getSenders()\n        .find(sender => sender.track.kind === 'video');\n\n    if (!videoSender) {\n        logger.warn('handleLayerSuspension unable to find video sender');\n\n        return;\n    }\n    if (!videoSender.getParameters) {\n        logger.debug('Browser doesn\\'t support RTPSender parameters');\n\n        return;\n    }\n    const parameters = videoSender.getParameters();\n\n    if (isSelected) {\n        logger.debug('Currently selected, enabling all sim layers');\n\n        // Make sure all encodings are enabled\n        parameters.encodings.forEach(e => {\n            e.active = true;\n        });\n    } else {\n        logger.debug('Not currently selected, disabling upper layers');\n\n        // Turn off the upper simulcast layers\n        [ 1, 2 ].forEach(simIndex => {\n            if (parameters.encodings[simIndex]) {\n                parameters.encodings[simIndex].active = false;\n            }\n        });\n    }\n    videoSender.setParameters(parameters);\n};\n\n/**\n * Set whether or not the endpoint is 'selected' by other endpoints, meaning\n * it appears on their main stage\n */\nTraceablePeerConnection.prototype.setIsSelected = function(isSelected) {\n    if (this.options.enableLayerSuspension) {\n        logger.debug('Layer suspension enabled,'\n            + `currently selected? ${isSelected}`);\n        handleLayerSuspension(this.peerconnection, isSelected);\n    }\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","import { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiTrack from './JitsiTrack';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\nimport SDPUtil from './SDPUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","import {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    return this.xmpp.caps.addFeature(feature, submit);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    return this.xmpp.caps.removeFeature(feature, submit);\n};\n","/* global __filename, $, Promise */\nimport { Strophe } from 'strophe.js';\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport RTC from './modules/RTC/RTC';\nimport TalkMutedDetection from './modules/detection/TalkMutedDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedNotification\n    from './modules/connectivity/IceFailedNotification';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport E2EEContext from './modules/e2ee/E2EEContext';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport RttMonitor from './modules/rttmonitor/rttmonitor';\nimport Settings from './modules/settings/Settings';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\n * (don't open any channel).\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n    this._conferenceJoinAnalyticsEventSent = false;\n\n    /**\n     * Max frame height that the user prefers to send to the remote participants.\n     * @type {number}\n     */\n    this.maxFrameHeight = null;\n\n    if (browser.supportsInsertableStreams()) {\n        this._e2eeCtx = new E2EEContext({ salt: this.options.name });\n    }\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.rttMonitor = new RttMonitor(config.rttMonitor || {});\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            callStatsConfIDNamespace: this.connection.options.hosts.domain,\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    if (config.enableTalkWhileMuted) {\n\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n\n\n        } else {\n            logger.info('Using audio level based detection for generating talk while muted events');\n            this._talkWhileMutedDetection = new TalkMutedDetection(\n                this, () => this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && !browser.isSafari()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.rttMonitor) {\n        this.rttMonitor.stop();\n        this.rttMonitor = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\n\n        this.room.sendMessage(message, elementName, displayName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addToPresence(name, values);\n        this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        // remove previously set nickname\n        this.room.removeFromPresence('nick');\n\n        this.room.addToPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        });\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (track.isVideoTrack()) {\n        // Ensure there's exactly 1 local video track in the conference.\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\n\n        if (localVideoTrack) {\n            // Don't be excessively harsh and severe if the API client happens\n            // to attempt to add the same local video track twice.\n            if (track === localVideoTrack) {\n                return Promise.resolve(track);\n            }\n\n            return Promise.reject(new Error(\n                'cannot add second video track to the conference'));\n\n        }\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Setup E2EE on the sender that is created for the unmuted track.\n    if (this._e2eeCtx && !track.isMuted() && browser.doesVideoMuteByStreamRemove()) {\n        if (this.p2pJingleSession) {\n            this._setupSenderE2EEForTrack(this.p2pJingleSession, track);\n        }\n        if (this.jvbJingleSession) {\n            this._setupSenderE2EEForTrack(this.jvbJingleSession, track);\n        }\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the\n                // JitsiConference level\n                this._setupNewTrack(newTrack);\n            }\n\n            return Promise.resolve();\n        }, error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        this.removeCommand('videoType');\n        this.sendCommand('videoType', {\n            value: newTrack.videoType,\n            attributes: {\n                xmlns: 'http://jitsi.org/jitmeet/video'\n            }\n        });\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    // Setup E2EE on the new track that has been added\n    // to the conference, apply it on all the open peerconnections.\n    if (this._e2eeCtx) {\n        if (this.p2pJingleSession) {\n            this._setupSenderE2EEForTrack(this.p2pJingleSession, newTrack);\n        }\n        if (this.jvbJingleSession) {\n            this._setupSenderE2EEForTrack(this.jvbJingleSession, newTrack);\n        }\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no P2P Jingle session started yet');\n    }\n\n    return Promise.all(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(\n            this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(\n            this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.all(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.rtc.selectEndpoints(participantIds);\n};\n\n/**\n * Elects the participant with the given id to be the pinned participant in\n * order to always receive video for this participant (even when last n is\n * enabled).\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n */\nJitsiConference.prototype.pinParticipant = function(participantId) {\n    this.rtc.pinEndpoint(participantId);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.rtc.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.rtc.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.keys(this.participants).map(function(key) {\n        return this.participants[key];\n    }, this);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid());\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant._role = role;\n    participant._botType = botType;\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    this._maybeStartOrStopP2P();\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has('https://jitsi.org/meet/e2ee')) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant._botType = botType;\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant._botType) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    const removedTracks = this.rtc.removeRemoteTracks(id);\n\n    removedTracks.forEach(\n        track =>\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\n\n    // there can be no participant in case the member that left is focus\n    if (participant) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\n    this._maybeClearSITimeout();\n};\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n */\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant._role = role;\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    // Setup E2EE handling, if supported.\n    this._setupReceiverE2EEForTrack(track);\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        // Setup E2EE.\n        const localTracks = this.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n\n        this.p2pJingleSession.setAnswer(answer);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(this.room, this.rtc, this.options.config);\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    // Add local tracks to the session\n    const localTracks = this.getLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                } else if (this.jvbJingleSession && this.maxFrameHeight) {\n                    // Apply user preferred max frame height if it was called before this\n                    // jingle session was created.\n                    this.jvbJingleSession.setSenderVideoConstraint(this.maxFrameHeight)\n                        .catch(err => {\n                            logger.error(`Sender video constraints failed on jvb session - ${err}`);\n                        });\n                }\n\n                // Setup E2EE.\n                for (const track of localTracks) {\n                    this._setupSenderE2EEForTrack(jingleSession, track);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    let bridgeChannelType;\n\n    switch (this.options.config.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        bridgeChannelType = 'datachannel';\n        break;\n    case 'websocket':\n        bridgeChannelType = 'websocket';\n        break;\n    }\n\n    if (bridgeChannelType === 'datachannel') {\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection;\n    }\n\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.removeFromPresence('startmuted');\n    this.room.addToPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    });\n    this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConference.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        if (this.xmpp.isPingSupported()) {\n            this._delayedIceFailed = new IceFailedNotification(this);\n            this._delayedIceFailed.start(session);\n        } else {\n            // Let Jicofo know that the JVB's ICE connection has failed\n            logger.info('PING not supported - sending ICE failed immediately');\n            session.sendIceFailedNotification();\n        }\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            // Apply user preferred max frame height if it was called before this\n            // jingle session was created.\n            if (this.pendingVideoConstraintsOnP2P) {\n                this.p2pJingleSession.setSenderVideoConstraint(this.maxFrameHeight)\n                    .catch(err => {\n                        logger.error(`Sender video constraints failed on p2p session - ${err}`);\n                    });\n            }\n\n            // Setup E2EE.\n            for (const track of localTracks) {\n                this._setupSenderE2EEForTrack(jingleSession, track);\n            }\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms',\n            'octo-enabled'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.rtc.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    // NOTE one may consider to start P2P with the local tracks detached,\n    // but no data will be sent until ICE succeeds anyway. And we switch\n    // immediately once the P2P ICE connects.\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(\n        maxFrameHeight) {\n    this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    this.maxFrameHeight = maxFrameHeight;\n    this.pendingVideoConstraintsOnP2P = true;\n    const promises = [];\n\n    // We have to always set the sender video constraints on the jvb connection\n    // when we switch from p2p to jvb connection since we need to check if the\n    // tracks constraints have been modified when in p2p.\n    if (this.jvbJingleSession) {\n        promises.push(this.jvbJingleSession.setSenderVideoConstraint(maxFrameHeight));\n    }\n    if (this.p2pJingleSession) {\n        this.pendingVideoConstraintsOnP2P = false;\n        promises.push(this.p2pJingleSession.setSenderVideoConstraint(maxFrameHeight));\n    }\n\n    return Promise.all(promises);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = true;\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return Boolean(this._e2eeCtx);\n};\n\n/**\n * Sets the key to be used for End-To-End encryption.\n *\n * @param {string} key the key to be used.\n * @returns {void}\n */\nJitsiConference.prototype.setE2EEKey = function(key) {\n    if (!this._e2eeCtx) {\n        logger.warn('Cannot set E2EE key: there is no defined context, platform is likely unsupported.');\n\n        return;\n    }\n\n    this._e2eeCtx.setKey(key);\n};\n\n/**\n * Setup E2EE for the sending side, if supported.\n * Note that this is only done for the JVB Peer Connecction.\n *\n * @returns {void}\n */\nJitsiConference.prototype._setupSenderE2EEForTrack = function(session, track) {\n    if (!this._e2eeCtx) {\n        return;\n    }\n    const pc = session.peerconnection;\n    const sender = pc.findSenderForTrack(track.track);\n\n    if (sender) {\n        this._e2eeCtx.handleSender(sender, track.getType());\n    } else {\n        logger.warn(`Could not handle E2EE for local ${track.getType()} track: sender not found`);\n    }\n};\n\n/**\n * Setup E2EE for the receiving side, if supported.\n * Note that this is only done for the JVB Peer Connecction.\n *\n * @returns {void}\n */\nJitsiConference.prototype._setupReceiverE2EEForTrack = function(track) {\n    if (!this._e2eeCtx) {\n        return;\n    }\n    const session = track.isP2P ? this.p2pJingleSession : this.jvbJingleSession;\n    const pc = session && session.peerconnection;\n\n    if (pc) {\n        const receiver = pc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this._e2eeCtx.handleReceiver(receiver, track.getType());\n        } else {\n            logger.warn(`Could not handle E2EE for remote ${track.getType()} track: receiver not found`);\n        }\n    }\n};\n","/* global __filename */\nimport { Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport Statistics from './modules/statistics/statistics';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const participant = conference.getParticipantById(\n                    Strophe.getResourceFromJid(jid));\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, displayName);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        id => {\n            if (conference.lastDominantSpeaker !== id && conference.room) {\n                conference.lastDominantSpeaker = id;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\n\n                if (conference.statistics && conference.myUserId() === id) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(\n                        conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    conference.xmpp.caps.removeListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    const featuresChangedListener = from => {\n        const participant\n            = conference.getParticipantById(\n            Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\n                participant);\n        }\n    };\n\n    conference.xmpp.caps.addListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        featuresChangedListener);\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\n        = featuresChangedListener;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { Strophe } from 'strophe.js';\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\nimport * as MediaType from './service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(timeout = 5000) {\n        if (this._getFeaturesPromise) {\n            return this._getFeaturesPromise;\n        }\n\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\n            .catch(error => {\n                // Retry on feature version mismatch\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\n                }\n\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\n\n                return Promise.reject(error);\n            });\n\n        return this._getFeaturesPromise\n            .then(result => {\n                this._getFeaturesPromise = undefined;\n\n                return result;\n            }, error => {\n                this._getFeaturesPromise = undefined;\n\n                throw error;\n            });\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport Moderator from './moderator';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room. This is intended to be used only by\n     * jitsi-meet-spot.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        // We need to broadcast 'videomuted' status from the beginning, cause\n        // Jicofo makes decisions based on that. Initialize it with 'false'\n        // here.\n        this.addVideoInfoToPresence(false);\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n    }\n\n    /**\n     * Joins the chat room.\n     * @param password\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info('Conference focus disabled');\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.trace('No meeting ID from backend');\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        const self = this;\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: self.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            self.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                this.sendPresence();\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, jid);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                memberOfThis.isFocus = true;\n                this._initFocus(from, jid);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param mucJid the jid of the focus in the muc\n     */\n    _initFocus(from, mucJid) {\n        this.focusMucJid = from;\n\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>destroy').length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            // if no member is found this is the case we had kicked someone\n            // and we are not in the list of members\n            if (membersKeys.find(jid => Strophe.getResourceFromJid(jid) === actorNick)) {\n                // we first fire the kicked so we can show the participant\n                // who kicked, before notifying that participant left\n                // we fire kicked for us and for any participant kicked\n                this.eventEmitter.emit(\n                    XMPPEvents.KICKED,\n                    isSelfPresence,\n                    actorNick,\n                    Strophe.getResourceFromJid(from));\n            }\n        }\n\n        if (!isSelfPresence) {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        } else if (membersKeys.length > 0) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid\n                && $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n            this.discoRoomInfo();\n        }\n        const jsonMessage = $(msg).find('>json-message').text();\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n        // We emit this event if the message is a valid json, and is not\n        // delivered after a delay, i.e. stamp is undefined.\n        // e.g. - subtitles should not be displayed if delayed.\n        if (parsedJson && stamp === undefined) {\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                from, parsedJson);\n\n            return;\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    kick(jid) {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t('You have been kicked.').up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param key\n     * @param values\n     */\n    addToPresence(key, values) {\n        values.tagName = key;\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n    }\n\n    /**\n     * Retreives a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     *\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        this.removeFromPresence('audiomuted');\n        this.addToPresence(\n            'audiomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        this.addAudioInfoToPresence(mute);\n\n        // FIXME resend presence on CONNECTED\n        this.sendPresence();\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        this.removeFromPresence('videomuted');\n        this.addToPresence(\n            'videomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute);\n        this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: false, // unmuted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     */\n    muteParticipant(jid, mute) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: 'http://jitsi.org/jitmeet/audio',\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this._removeConnListeners.forEach(remove => remove());\n            this._removeConnListeners = [];\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $, Promise */\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nimport { $iq, Strophe } from 'strophe.js';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nimport Settings from '../settings/Settings';\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\n    // it will be enabled automatically if focus detects the component through\n    // service discovery.\n    this.sipGatewayEnabled\n        = this.options.connection.hosts\n            && this.options.connection.hosts.call_control !== undefined;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n    if (this.options.connection.enforcedBridge !== undefined) {\n        elem.c(\n            'property', {\n                name: 'enforcedBridge',\n                value: this.options.connection.enforcedBridge\n            }).up();\n    }\n\n    // Tell the focus we have Jigasi configured\n    if (this.options.connection.hosts !== undefined\n        && this.options.connection.hosts.call_control !== undefined) {\n        elem.c(\n            'property', {\n                name: 'call_control',\n                value: this.options.connection.hosts.call_control\n            }).up();\n    }\n    if (config.channelLastN !== undefined) {\n        elem.c(\n            'property', {\n                name: 'channelLastN',\n                value: config.channelLastN\n            }).up();\n    }\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.enableTcc !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableTcc',\n                    value: Boolean(config.enableTcc)\n                }).up();\n    }\n    if (config.enableRemb !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableRemb',\n                    value: Boolean(config.enableRemb)\n                }).up();\n    }\n    if (config.minParticipants !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'minParticipants',\n                    value: config.minParticipants\n                }).up();\n    }\n\n    elem.c(\n        'property', {\n            name: 'enableLipSync',\n            value: this.options.connection.enableLipSync === true\n        }).up();\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n    if (config.testing && config.testing.octo\n        && typeof config.testing.octo.probability === 'number') {\n        if (Math.random() < config.testing.octo.probability) {\n            elem.c(\n                'property', {\n                    name: 'octo',\n                    value: true\n                }).up();\n        }\n    }\n\n    let openSctp;\n\n    switch (this.options.conference.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        openSctp = true;\n        break;\n    case 'websocket':\n        openSctp = false;\n        break;\n    }\n\n    elem.c(\n        'property', {\n            name: 'openSctp',\n            value: openSctp\n        }).up();\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    if (this.options.conference.stereo !== undefined) {\n        elem.c(\n            'property', {\n                name: 'stereo',\n                value: this.options.conference.stereo\n            }).up();\n    }\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\n        elem.c(\n            'property', {\n                name: 'useRoomAsSharedDocumentName',\n                value: this.options.conference.useRoomAsSharedDocumentName\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if focus has auto-detected Jigasi component(this will be also\n    // included if we have passed our host from the config)\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = function(...args) {\n            this._lastSuccess = Date.now();\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","/* global $, __filename */\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\nimport Statistics from '../statistics/statistics';\n\nimport JingleSessionPC from './JingleSessionPC';\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(iceConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace:\\t', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.connection.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n            res => {\n                const iceservers = [];\n\n                $(res).find('>services>service').each((idx, el) => {\n                    // eslint-disable-next-line no-param-reassign\n                    el = $(el);\n                    const dict = {};\n                    const type = el.attr('type');\n\n                    switch (type) {\n                    case 'stun':\n                        dict.urls = `stun:${el.attr('host')}`;\n                        if (el.attr('port')) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        iceservers.push(dict);\n                        break;\n                    case 'turn':\n                    case 'turns': {\n                        dict.urls = `${type}:`;\n                        const username = el.attr('username');\n\n                        // https://code.google.com/p/webrtc/issues/detail\n                        // ?id=1508\n\n                        if (username) {\n                            const match\n                                = navigator.userAgent.match(\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\n\n                            if (match && parseInt(match[2], 10) < 28) {\n                                dict.urls += `${username}@`;\n                            } else {\n                                // only works in M28\n                                dict.username = username;\n                            }\n                        }\n                        dict.urls += el.attr('host');\n                        const port = el.attr('port');\n\n                        if (port) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        const transport = el.attr('transport');\n\n                        if (transport && transport !== 'udp') {\n                            dict.urls += `?transport=${transport}`;\n                        }\n\n                        dict.credential = el.attr('password')\n                                || dict.credential;\n                        iceservers.push(dict);\n                        break;\n                    }\n                    }\n                });\n\n                const options = this.xmpp.options;\n\n                if (options.useStunTurn) {\n                    // we want to filter and leave only tcp/turns candidates\n                    // which make sense for the jvb connections\n                    this.jvbIceConfig.iceServers\n                        = iceservers.filter(s => s.urls.startsWith('turns'));\n                }\n\n                if (options.p2p && options.p2p.useStunTurn) {\n                    this.p2pIceConfig.iceServers = iceservers;\n                }\n\n            }, err => {\n                logger.warn('getting turn credentials failed', err);\n                logger.warn('is mod_turncredentials or similar installed?');\n            });\n\n        // implement push?\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import async from 'async';\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        task(finishedCallback);\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Ping every 10 sec\n */\nconst PING_INTERVAL = 10000;\n\n/**\n * Ping timeout error after 15 sec of waiting.\n */\nconst PING_TIMEOUT = 15000;\n\n/**\n * Will close the connection after 3 consecutive ping errors.\n */\nconst PING_THRESHOLD = 3;\n\n/**\n * The number of timestamps of send pings to keep.\n * The current value is 2 minutes.\n * @type {number} number of timestamps.\n */\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Contructs new object\n     * @param {XMPP} xmpp the xmpp module.\n     * @constructor\n     */\n    constructor(xmpp) {\n        super();\n        this.failedPings = 0;\n        this.xmpp = xmpp;\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     * @param interval task interval in ms.\n     */\n    startInterval(remoteJid, interval = PING_INTERVAL) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n            this.ping(remoteJid, () => {\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= PING_THRESHOLD) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n\n                    // FIXME it doesn't help to disconnect when 3rd PING\n                    // times out, it only stops Strophe from retrying.\n                    // Not really sure what's the right thing to do in that\n                    // situation, but just closing the connection makes no\n                    // sense.\n                    // self.connection.disconnect();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, PING_TIMEOUT);\n        }, interval);\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= PING_INTERVAL;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * Detect user trying to speek while is locally muted and fires an event.\n */\nexport default class TalkMutedDetection {\n    /**\n     * Creates TalkMutedDetection\n     * @param conference the JitsiConference instance that created us.\n     * @param callback the callback to call when detected that the local user is\n     * talking while her microphone is muted.\n     * @constructor\n     */\n    constructor(conference, callback) {\n        /**\n         * The callback to call when detected that the local user is talking\n         * while her microphone is muted.\n         *\n         * @private\n         */\n        this._callback = callback;\n\n        /**\n         * The indicator which determines whether <tt>callback</tt> has been\n         * invoked for the current local audio track of <tt>conference</tt> so\n         * that it is invoked once only.\n         *\n         * @private\n         */\n        this._eventFired = false;\n\n        // XXX I went back and forth on the subject of where to put the access\n        // to statistics. On the one had, (1) statistics is likely intended to\n        // be private to conference and (2) there is a desire to keep the\n        // dependencies of modules to the minimum (i.e. not have\n        // TalkMutedDetection depend on statistics). On the other hand, (1)\n        // statistics is technically not private because\n        // JitsiConferenceEventManager accesses it and (2) TalkMutedDetection\n        // works exactly because it knows that there are no audio levels for\n        // JitsiLocalTrack but there are audio levels for the local participant\n        // through statistics.\n        conference.statistics.addAudioLevelListener(\n            this._audioLevel.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n        conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            this._trackAdded.bind(this));\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Receives audio level events for all send and receive streams.\n     *\n     * @param {TraceablePeerConnection} pc - WebRTC PeerConnection object of the\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of\n     * the endpoint/participant/stream being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt>.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> represents a\n     * local/send stream or <tt>false</tt> for a remote/receive stream.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio stream only and if event is not\n        // sent yet.\n        if (!isLocal || !this.audioTrack || this._eventFired) {\n            return;\n        }\n\n        if (this.audioTrack.isMuted()\n            && audioLevel > SPEECH_DETECT_THRESHOLD) {\n            this._eventFired = true;\n            this._callback();\n        }\n    }\n    /* eslint-enable max-params */\n\n    /**\n     * Determines whether a specific {@link JitsiTrack} represents a local audio\n     * track.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> to be checked whether\n     * it represents a local audio track.\n     * @private\n     * @return {boolean} - <tt>true</tt> if the specified <tt>track</tt>\n     * represents a local audio track; otherwise, <tt>false</tt>.\n     */\n    _isLocalAudioTrack(track) {\n        return track.isAudioTrack() && track.isLocal();\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that a {@link JitsiTrack} was\n     * added to the associated {@link JitsiConference}. Looks for the local\n     * audio track only.\n     *\n     * @param {JitsiTrack} track - The added <tt>JitsiTrack</tt>.\n     * @private\n     */\n    _trackAdded(track) {\n        if (this._isLocalAudioTrack(track)) {\n            this.audioTrack = track;\n        }\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that the mute state of a\n     * {@link JitsiTrack} has changed. Looks for the local audio track only.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> whose mute state has\n     * changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (this._isLocalAudioTrack(track) && track.isMuted()) {\n            this._eventFired = false;\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n        }\n    }\n}\n","import * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst VideoType = require('../../service/RTC/VideoType');\nconst Resolutions = require('../../service/RTC/Resolutions');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * See media/engine/simulcast.ss from webrtc.org\n */\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        max: 5000,\n        target: 4000,\n        min: 800 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        max: 2500,\n        target: 2500,\n        min: 600 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        max: 900,\n        target: 900,\n        min: 450 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        max: 700,\n        target: 500,\n        min: 150 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        max: 450,\n        target: 350,\n        min: 150 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        max: 200,\n        target: 150,\n        min: 30 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n\n/**\n * The current cap (in kbps) put on the video stream (or null if there isn't\n * a cap).  If there is a cap, we'll take it into account when calculating\n * the current quality.\n */\nlet videoBitrateCap = null;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video started.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    if (simulcast) {\n        // Find the first format with height no bigger than ours.\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n        if (simulcastFormat) {\n            // Sum the target fields from all simulcast layers for the given\n            // resolution (e.g. 720p + 360p + 180p).\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\n                const targetHeight = height;\n\n                simulcastFormat\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\n                if (simulcastFormat) {\n                    target += simulcastFormat.target;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        // See GetMaxDefaultVideoBitrateKbps in\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\n        const pixels = resolution.width * resolution.height;\n\n        if (pixels <= 320 * 240) {\n            target = 600;\n        } else if (pixels <= 640 * 480) {\n            target = 1700;\n        } else if (pixels <= 960 * 540) {\n            target = 2000;\n        } else {\n            target = 2500;\n        }\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second.\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        /**\n         * The time at which a video bitrate cap was last removed.  We use\n         * this to calculate how much time we, as a sender, have had to\n         * ramp-up\n         */\n        this._timeLastBwCapRemoved = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module\n        // and update the _localStats field.\n        // Oh, and by the way, the resolutions of all remote participants are\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\n        // if one carefully reads the *code* (but not the docs) in\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\n        // jitsi-meet\n        // TODO: We should keep track of the remote resolution in _remoteStats,\n        // and notify about changes via separate events.\n        conference.statistics.addConnectionStatsListener(\n            this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or\n     * a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the\n     * camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the sending bitrate.\n\n            // Figure out if simulcast is in use\n            const activeTPC = this._conference.getActivePeerConnection();\n            const isSimulcastOn\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\n\n            const newVideoBitrateCap\n                = activeTPC && activeTPC.bandwidthLimiter\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\n\n            // If we had a cap set but there isn't one now, then it has\n            // just been 'lifted', so we should treat this like a new\n            // ramp up.\n            if (!newVideoBitrateCap && videoBitrateCap) {\n                this._timeLastBwCapRemoved = window.performance.now();\n\n                // Set the start bitrate to whatever we were just capped to\n                startBitrate = videoBitrateCap;\n            }\n            videoBitrateCap = newVideoBitrateCap;\n\n            // time since sending of video was enabled.\n            const millisSinceStart = window.performance.now()\n                - Math.max(this._timeVideoUnmuted,\n                    this._timeIceConnected,\n                    this._timeLastBwCapRemoved);\n\n            // expected sending bitrate in perfect conditions\n            let target\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\n\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\n\n            if (videoBitrateCap) {\n                target = Math.min(target, videoBitrateCap);\n            }\n\n            quality = 100 * this._localStats.bitrate.upload / target;\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\n                    / 1000;\n\n            quality\n                = Math.min(\n                    quality,\n                    prevConnectionQuality\n                        + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.broadcastEndpointMessage({\n                type: STATS_MESSAGE_TYPE,\n                values: data });\n        } catch (e) {\n            // We often hit this in the beginning of a call, before the data\n            // channel is ready. It is not a big problem, because we will\n            // send the statistics again after a few seconds, and the error is\n            // already logged elsewhere. So just ignore it.\n\n            // let errorMsg = \"Failed to broadcast local stats\";\n            // logger.error(errorMsg, e);\n            // GlobalOnErrorHandler.callErrorHandler(\n            //    new Error(errorMsg + \": \" + e));\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack ? localVideoTrack.resolution : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A delayed ICE failed notification which is triggered only if the ICE\n * connection does not recover soon after or before the XMPP connection is\n * restored (if it was ever broken). If ICE fails while the XMPP connection is\n * not broken then the notifications will be sent after 2 seconds delay. This\n * extra delay is not intentional just a side effect of the code.\n * NOTE that this delayed task can only be used if PING is supported by the XMPP\n * server.\n */\nexport default class IceFailedNotification {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * Starts the task.\n     * @param {JingleSessionPC} session - the JVB Jingle session.\n     */\n    start(session) {\n        // The 65 seconds are greater than the default Prosody's BOSH\n        // timeout of 60. This gives some time for the XMPP connection\n        // to recover.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (this._canceled) {\n                    return;\n                }\n\n                const jvbConnection = this._conference.jvbJingleSession;\n                const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n                if (!jvbConnection) {\n                    logger.warn('Not sending ICE failed - no JVB connection');\n                } else if (jvbConnIceState === 'connected') {\n                    logger.info('ICE connection restored - not sending ICE failed');\n                } else {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        logger.info(`Sending ICE failed - the connection has not recovered: ${jvbConnIceState}`);\n                        this._iceFailedTimeout = undefined;\n                        session.sendIceFailedNotification();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error(\n                    'PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        if (this._iceFailedTimeout) {\n            window.clearTimeout(this._iceFailedTimeout);\n        }\n    }\n}\n","/* global __filename */\n\nimport { createWorkerScript } from './Worker';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     *\n     * @param {string} options.salt - Salt to be used for key deviation.\n     *      FIXME: We currently use the MUC room name for this which has the same lifetime\n     *      as this context. While not (pseudo)random as recommended in\n     *        https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params\n     *      this is easily available and the same for all participants.\n     *      We currently do not enforce a minimum length of 16 bytes either.\n     */\n    constructor(options) {\n        this._options = options;\n\n        // Initialize the E2EE worker.\n        this._worker = new Worker(createWorkerScript(), {\n            name: 'E2EE Worker'\n        });\n        this._worker.onerror = e => logger.onerror(e);\n\n        // Initialize the salt and convert it once.\n        const encoder = new TextEncoder();\n\n        // Send initial options to worker.\n        this._worker.postMessage({\n            operation: 'initialize',\n            salt: encoder.encode(options.salt)\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     */\n    handleReceiver(receiver, kind) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        const receiverStreams\n            = kind === 'video' ? receiver.createEncodedVideoStreams() : receiver.createEncodedAudioStreams();\n\n        this._worker.postMessage({\n            operation: 'decode',\n            readableStream: receiverStreams.readableStream,\n            writableStream: receiverStreams.writableStream\n        }, [ receiverStreams.readableStream, receiverStreams.writableStream ]);\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     */\n    handleSender(sender, kind) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        const senderStreams\n            = kind === 'video' ? sender.createEncodedVideoStreams() : sender.createEncodedAudioStreams();\n\n        this._worker.postMessage({\n            operation: 'encode',\n            readableStream: senderStreams.readableStream,\n            writableStream: senderStreams.writableStream\n        }, [ senderStreams.readableStream, senderStreams.writableStream ]);\n    }\n\n    /**\n     * Sets the key to be used for E2EE.\n     *\n     * @param {string} value - Value to be used as the new key. May be falsy to disable end-to-end encryption.\n     */\n    setKey(value) {\n        let key;\n\n        if (value) {\n            const encoder = new TextEncoder();\n\n            key = encoder.encode(value);\n        } else {\n            key = false;\n        }\n\n        this._worker.postMessage({\n            operation: 'setKey',\n            key\n        });\n    }\n}\n","// Worker for E2EE/Insertable streams. Currently served as an inline blob.\nconst code = `\n    // We use a ringbuffer of keys so we can change them and still decode packets that were\n    // encrypted with an old key.\n    // In the future when we dont rely on a globally shared key we will actually use it. For\n    // now set the size to 1 which means there is only a single key. This causes some\n    // glitches when changing the key but its ok.\n    const keyRingSize = 1;\n\n    // We use a 96 bit IV for AES GCM. This is signalled in plain together with the\n    // packet. See https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n    const ivLength = 12;\n\n    // We copy the first bytes of the VP8 payload unencrypted.\n    // For keyframes this is 10 bytes, for non-keyframes (delta) 3. See\n    //   https://tools.ietf.org/html/rfc6386#section-9.1\n    // This allows the bridge to continue detecting keyframes (only one byte needed in the JVB)\n    // and is also a bit easier for the VP8 decoder (i.e. it generates funny garbage pictures\n    // instead of being unable to decode).\n    // This is a bit for show and we might want to reduce to 1 unconditionally in the final version.\n    //\n    // For audio (where frame.type is not set) we do not encrypt the opus TOC byte:\n    //   https://tools.ietf.org/html/rfc6716#section-3.1\n    const unencryptedBytes = {\n        key: 10,\n        delta: 3,\n        undefined: 1 // frame.type is not set on audio\n    };\n\n    // An array (ring) of keys that we use for sending and receiving.\n    const cryptoKeyRing = new Array(keyRingSize);\n\n        // A pointer to the currently used key.\n    let currentKeyIndex = -1;\n\n    // We keep track of how many frames we have sent per ssrc.\n    // Starts with a random offset similar to the RTP sequence number.\n    const sendCounts = new Map();\n\n    // Salt used in key derivation\n    // FIXME: We currently use the MUC room name for this which has the same lifetime\n    // as this worker. While not (pseudo)random as recommended in\n    // https://developer.mozilla.org/en-US/docs/Web/API/Pbkdf2Params\n    // this is easily available and the same for all participants.\n    // We currently do not enforce a minimum length of 16 bytes either.\n    let salt;\n\n    /**\n     * Derives a AES-GCM key with 128 bits from the input using PBKDF2\n     * The salt is configured in the constructor of this class.\n     * @param {Uint8Array} keyBytes - Value to derive key from\n     */\n    async function deriveKey(keyBytes) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n        const material = await crypto.subtle.importKey('raw', keyBytes,\n            'PBKDF2', false, [ 'deriveBits', 'deriveKey' ]);\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#PBKDF2\n        return crypto.subtle.deriveKey({\n            name: 'PBKDF2',\n            salt,\n            iterations: 100000,\n            hash: 'SHA-256'\n        }, material, {\n            name: 'AES-GCM',\n            length: 128\n        }, false, [ 'encrypt', 'decrypt' ]);\n    }\n\n    /**\n     * Construct the IV used for AES-GCM and sent (in plain) with the packet similar to\n     * https://tools.ietf.org/html/rfc7714#section-8.1\n     * It concatenates\n     * - the 32 bit synchronization source (SSRC) given on the encoded frame,\n     * - the 32 bit rtp timestamp given on the encoded frame,\n     * - a send counter that is specific to the SSRC. Starts at a random number.\n     * The send counter is essentially the pictureId but we currently have to implement this ourselves.\n     * There is no XOR with a salt. Note that this IV leaks the SSRC to the receiver but since this is\n     * randomly generated and SFUs may not rewrite this is considered acceptable.\n     * The SSRC is used to allow demultiplexing multiple streams with the same key, as described in\n     *   https://tools.ietf.org/html/rfc3711#section-4.1.1\n     * The RTP timestamp is 32 bits and advances by the codec clock rate (90khz for video, 48khz for\n     * opus audio) every second. For video it rolls over roughly every 13 hours.\n     * The send counter will advance at the frame rate (30fps for video, 50fps for 20ms opus audio)\n     * every second. It will take a long time to roll over.\n     *\n     * See also https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n     */\n    function makeIV(synchronizationSource, timestamp) {\n        const iv = new ArrayBuffer(ivLength);\n        const ivView = new DataView(iv);\n\n        // having to keep our own send count (similar to a picture id) is not ideal.\n        if (!sendCounts.has(synchronizationSource)) {\n            // Initialize with a random offset, similar to the RTP sequence number.\n            sendCounts.set(synchronizationSource, Math.floor(Math.random() * 0xFFFF));\n        }\n        const sendCount = sendCounts.get(synchronizationSource);\n\n        ivView.setUint32(0, synchronizationSource);\n        ivView.setUint32(4, timestamp);\n        ivView.setUint32(8, sendCount % 0xFFFF);\n\n        sendCounts.set(synchronizationSource, sendCount + 1);\n\n        return iv;\n    }\n\n    /**\n     * Function that will be injected in a stream and will encrypt the given encoded frames.\n     *\n     * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n     * @param {TransformStreamDefaultController} controller - TransportStreamController.\n     *\n     * The packet format is described below. One of the design goals was to not require\n     * changes to the SFU which for video requires not encrypting the keyframe bit of VP8\n     * as SFUs need to detect a keyframe (framemarking or the generic frame descriptor will\n     * solve this eventually). This also \"hides\" that a client is using E2EE a bit.\n     *\n     * Note that this operates on the full frame, i.e. for VP8 the data described in\n     *   https://tools.ietf.org/html/rfc6386#section-9.1\n     *\n     * The VP8 payload descriptor described in\n     *   https://tools.ietf.org/html/rfc7741#section-4.2\n     * is part of the RTP packet and not part of the frame and is not controllable by us.\n     * This is fine as the SFU keeps having access to it for routing.\n     *\n     * The encrypted frame is formed as follows:\n     * 1) Leave the first (10, 3, 1) bytes unencrypted, depending on the frame type and kind.\n     * 2) Form the GCM IV for the frame as described above.\n     * 3) Encrypt the rest of the frame using AES-GCM.\n     * 4) Allocate space for the encrypted frame.\n     * 5) Copy the unencrypted bytes to the start of the encrypted frame.\n     * 6) Append the ciphertext to the encrypted frame.\n     * 7) Append the IV.\n     * 8) Append a single byte for the key identifier. TODO: we don't need all the bits.\n     * 9) Enqueue the encrypted frame for sending.\n     */\n    function encodeFunction(encodedFrame, controller) {\n        const keyIndex = currentKeyIndex % cryptoKeyRing.length;\n\n        if (cryptoKeyRing[keyIndex]) {\n            const iv = makeIV(encodedFrame.synchronizationSource, encodedFrame.timestamp);\n\n            return crypto.subtle.encrypt({\n                name: 'AES-GCM',\n                iv,\n                additionalData: new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])\n            }, cryptoKeyRing[keyIndex], new Uint8Array(encodedFrame.data, unencryptedBytes[encodedFrame.type]))\n            .then(cipherText => {\n                const newData = new ArrayBuffer(unencryptedBytes[encodedFrame.type] + cipherText.byteLength\n                    + iv.byteLength + 1);\n                const newUint8 = new Uint8Array(newData);\n\n                newUint8.set(\n                    new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])); // copy first bytes.\n                newUint8.set(\n                    new Uint8Array(cipherText), unencryptedBytes[encodedFrame.type]); // add ciphertext.\n                newUint8.set(\n                    new Uint8Array(iv), unencryptedBytes[encodedFrame.type] + cipherText.byteLength); // append IV.\n                newUint8[unencryptedBytes[encodedFrame.type] + cipherText.byteLength + ivLength]\n                    = keyIndex; // set key index.\n\n                encodedFrame.data = newData;\n\n                return controller.enqueue(encodedFrame);\n            }, e => {\n                console.error(e);\n\n                // We are not enqueuing the frame here on purpose.\n            });\n        }\n\n        /* NOTE WELL:\n         * This will send unencrypted data (only protected by DTLS transport encryption) when no key is configured.\n         * This is ok for demo purposes but should not be done once this becomes more relied upon.\n         */\n        controller.enqueue(encodedFrame);\n    }\n\n    /**\n     * Function that will be injected in a stream and will decrypt the given encoded frames.\n     *\n     * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n     * @param {TransformStreamDefaultController} controller - TransportStreamController.\n     *\n     * The decrypted frame is formed as follows:\n     * 1) Extract the key index from the last byte of the encrypted frame.\n     *    If there is no key associated with the key index, the frame is enqueued for decoding\n     *    and these steps terminate.\n     * 2) Determine the frame type in order to look up the number of unencrypted header bytes.\n     * 2) Extract the 12-byte IV from its position near the end of the packet.\n     *    Note: the IV is treated as opaque and not reconstructed from the input.\n     * 3) Decrypt the encrypted frame content after the unencrypted bytes using AES-GCM.\n     * 4) Allocate space for the decrypted frame.\n     * 5) Copy the unencrypted bytes from the start of the encrypted frame.\n     * 6) Append the plaintext to the decrypted frame.\n     * 7) Enqueue the decrypted frame for decoding.\n     */\n    function decodeFunction(encodedFrame, controller) {\n        const data = new Uint8Array(encodedFrame.data);\n        const keyIndex = data[encodedFrame.data.byteLength - 1];\n\n        if (cryptoKeyRing[keyIndex]) {\n            const iv = new Uint8Array(encodedFrame.data, encodedFrame.data.byteLength - ivLength - 1, ivLength);\n            const cipherTextStart = unencryptedBytes[encodedFrame.type];\n            const cipherTextLength = encodedFrame.data.byteLength - (unencryptedBytes[encodedFrame.type]\n                + ivLength + 1);\n\n            return crypto.subtle.decrypt({\n                name: 'AES-GCM',\n                iv,\n                additionalData: new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type])\n            }, cryptoKeyRing[keyIndex], new Uint8Array(encodedFrame.data, cipherTextStart, cipherTextLength))\n            .then(plainText => {\n                const newData = new ArrayBuffer(unencryptedBytes[encodedFrame.type] + plainText.byteLength);\n                const newUint8 = new Uint8Array(newData);\n\n                newUint8.set(new Uint8Array(encodedFrame.data, 0, unencryptedBytes[encodedFrame.type]));\n                newUint8.set(new Uint8Array(plainText), unencryptedBytes[encodedFrame.type]);\n\n                encodedFrame.data = newData;\n\n                return controller.enqueue(encodedFrame);\n            }, e => {\n                // TODO: notify the application about error status.\n\n                // TODO: For video we need a better strategy since we do not want to based any\n                // non-error frames on a garbage keyframe.\n                if (encodedFrame.type === undefined) { // audio, replace with silence.\n                    // audio, replace with silence.\n                    const newData = new ArrayBuffer(3);\n                    const newUint8 = new Uint8Array(newData);\n\n                    newUint8.set([ 0xd8, 0xff, 0xfe ]); // opus silence frame.\n                    encodedFrame.data = newData;\n                    controller.enqueue(encodedFrame);\n                }\n            });\n        } else if (keyIndex >= cryptoKeyRing.length && cryptoKeyRing[currentKeyIndex % cryptoKeyRing.length]) {\n            // If we are encrypting but don't have a key for the remote drop the frame.\n            // This is a heuristic since we don't know whether a packet is encrypted,\n            // do not have a checksum and do not have signaling for whether a remote participant does\n            // encrypt or not.\n            return;\n        }\n\n        // TODO: this just passes through to the decoder. Is that ok? If we don't know the key yet\n        // we might want to buffer a bit but it is still unclear how to do that (and for how long etc).\n        controller.enqueue(encodedFrame);\n    }\n\n    onmessage = async (event) => {\n        const {operation} = event.data;\n        if (operation === 'initialize') {\n            salt = event.data.salt;\n        } else if (operation === 'encode') {\n            const {readableStream, writableStream} = event.data;\n            const transformStream = new TransformStream({\n                transform: encodeFunction,\n            });\n            readableStream\n                .pipeThrough(transformStream)\n                .pipeTo(writableStream);\n        } else if (operation === 'decode') {\n            const {readableStream, writableStream} = event.data;\n            const transformStream = new TransformStream({\n                transform: decodeFunction,\n            });\n            readableStream\n                .pipeThrough(transformStream)\n                .pipeTo(writableStream);\n        } else if (operation === 'setKey') {\n            const keyBytes = event.data.key;\n            let key;\n            if (keyBytes) {\n                key = await deriveKey(keyBytes);\n            } else {\n                key = false;\n            }\n            currentKeyIndex++;\n            cryptoKeyRing[currentKeyIndex % cryptoKeyRing.length] = key;\n        } else {\n            console.error('e2ee worker', operation);\n        }\n    };\n\n`;\n\nexport const createWorkerScript = () => URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import browser from '../browser';\nimport { createRttByRegionEvent }\n    from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport RTCUtils from '../RTC/RTCUtils';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The options to pass to createOffer (we need to offer to receive *something*\n * for the PC to gather candidates.\n */\nconst offerOptions = {\n    offerToReceiveAudio: 1,\n    offerToReceiveVideo: 0\n};\n\n\n/**\n * The interval at which the webrtc engine sends STUN keep alive requests.\n * @type {number}\n */\nconst stunKeepAliveIntervalMs = 10000;\n\n/**\n * Wraps a PeerConnection with one specific STUN server and measures the RTT\n * to the STUN server.\n */\nclass PCMonitor {\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {String} region - The region of the STUN server.\n     * @param {String} address - The address of the STUN server.\n     * @param {number} getStatsIntervalMs how often to call getStats.\n     * @param {number} delay the delay after which the PeerConnection will be\n     * started (that is, createOffer and setLocalDescription will be invoked).\n     *\n     */\n    constructor(region, address, getStatsIntervalMs, delay) {\n        /* eslint-disable max-params */\n        this.region = region;\n        this.getStatsIntervalMs = getStatsIntervalMs;\n        this.getStatsInterval = null;\n\n        // What we consider the current RTT. It is Math.min(this.rtts).\n        this.rtt = Infinity;\n\n        // The RTT measurements we've made from the latest getStats() calls.\n        this.rtts = [];\n\n        const iceServers = [ { 'url': `stun:${address}` } ];\n\n        this.pc = new RTCUtils.RTCPeerConnectionType(\n            {\n                'iceServers': iceServers\n            });\n\n        // Maps a key consisting of the IP address, port and priority of a\n        // candidate to some state related to it. If we have more than one\n        // network interface we will might multiple srflx candidates and this\n        // helps to distinguish between then.\n        this.candidates = {};\n\n        this.stopped = false;\n\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.startStatsInterval = this.startStatsInterval.bind(this);\n        this.handleCandidateRtt = this.handleCandidateRtt.bind(this);\n\n        window.setTimeout(this.start, delay);\n    }\n\n    /**\n     * Starts this PCMonitor. That is, invokes createOffer and\n     * setLocalDescription on the PeerConnection and starts an interval which\n     * calls getStats.\n     */\n    start() {\n        if (this.stopped) {\n            return;\n        }\n\n        this.pc.createOffer(offerOptions).then(offer => {\n            this.pc.setLocalDescription(\n                offer,\n                () => {\n                    logger.info(\n                        `setLocalDescription success for ${this.region}`);\n                    this.startStatsInterval();\n                },\n                error => {\n                    logger.warn(\n                        `setLocalDescription failed for ${this.region}: ${\n                            error}`);\n                }\n            );\n        });\n    }\n\n    /**\n     * Starts an interval which invokes getStats on the PeerConnection and\n     * measures the RTTs for the different candidates.\n     */\n    startStatsInterval() {\n        this.getStatsInterval = window.setInterval(\n            () => {\n                // Note that the data that we use to measure the RTT is only\n                // available in the legacy (callback based) getStats API.\n                this.pc.getStats(stats => {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n                        const rttTotal\n                            = Number(res.stat('stunKeepaliveRttTotal'));\n\n                        // We recognize the results that we care for (local\n                        // candidates of type srflx) by the existance of the\n                        // stunKeepaliveRttTotal stat.\n                        if (rttTotal > 0) {\n                            const candidateKey\n                                = `${res.stat('ipAddress')}_${\n                                    res.stat('portNumber')}_${\n                                    res.stat('priority')}`;\n\n                            this.handleCandidateRtt(\n                                candidateKey,\n                                rttTotal,\n                                Number(\n                                    res.stat('stunKeepaliveResponsesReceived')),\n                                Number(\n                                    res.stat('stunKeepaliveRequestsSent')));\n                        }\n                    }\n\n                    // After we've measured the RTT for all candidates we,\n                    // update the state of the PC with the shortest one.\n                    let rtt = Infinity;\n\n                    for (const key in this.candidates) {\n                        if (this.candidates.hasOwnProperty(key)\n                            && this.candidates[key].rtt > 0) {\n                            rtt = Math.min(rtt, this.candidates[key].rtt);\n                        }\n                    }\n\n                    // We keep the last 6 measured RTTs and choose the shortest\n                    // one to export to analytics. This is because we often see\n                    // failures get a real measurement which end up as Infinity.\n                    this.rtts.push(rtt);\n                    if (this.rtts.length > 6) {\n                        this.rtts = this.rtts.splice(1, 7);\n                    }\n                    this.rtt = Math.min(...this.rtts);\n                });\n            },\n            this.getStatsIntervalMs\n        );\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Updates the RTT for a candidate identified by \"key\" based on the values\n     * from getStats() and the previously saved state (i.e. old values).\n     *\n     * @param {String} key the ID for the candidate\n     * @param {number} rttTotal the value of the 'stunKeepaliveRttTotal' just\n     * measured.\n     * @param {number} responsesReceived the value of the\n     * 'stunKeepaliveResponsesReceived' stat just measured.\n     * @param {number} requestsSent the value of the 'stunKeepaliveRequestsSent'\n     * stat just measured.\n     */\n    handleCandidateRtt(key, rttTotal, responsesReceived, requestsSent) {\n        /* eslist-enable max-params */\n        if (!this.candidates[key]) {\n            this.candidates[key] = {\n                rttTotal: 0,\n                responsesReceived: 0,\n                requestsSent: 0,\n                rtt: NaN\n            };\n        }\n\n        const rttTotalDiff = rttTotal - this.candidates[key].rttTotal;\n        const responsesReceivedDiff\n            = responsesReceived - this.candidates[key].responsesReceived;\n\n        // We observe that when the difference between the number of requests\n        // and responses has grown (i.q. when the value below is positive), the\n        // the RTT measurements are incorrect (too low). For this reason we\n        // ignore these measurement (setting rtt=NaN), but update our state.\n        const requestsResponsesDiff\n            = (requestsSent - responsesReceived)\n            - (this.candidates[key].requestsSent\n                - this.candidates[key].responsesReceived);\n        let rtt = NaN;\n\n        if (responsesReceivedDiff > 0 && requestsResponsesDiff === 0) {\n            rtt = rttTotalDiff / responsesReceivedDiff;\n        }\n\n        this.candidates[key].rttTotal = rttTotal;\n        this.candidates[key].responsesReceived = responsesReceived;\n        this.candidates[key].requestsSent = requestsSent;\n        this.candidates[key].rtt = rtt;\n    }\n\n\n    /**\n     * Stops this PCMonitor, clearing its intervals and stopping the\n     * PeerConnection.\n     */\n    stop() {\n        if (this.getStatsInterval) {\n            window.clearInterval(this.getStatsInterval);\n        }\n\n        this.pc.close();\n\n        this.stopped = true;\n    }\n}\n\n/**\n * A class which monitors the round-trip time (RTT) to a set of STUN servers.\n * The measured RTTs are sent as analytics events. It uses a separate\n * PeerConnection (represented as a PCMonitor) for each STUN server.\n */\nexport default class RttMonitor {\n    /**\n     * Initializes a new RttMonitor.\n     * @param {Object} config the object holding the configuration.\n     */\n    constructor(config) {\n        if (!config || !config.enabled\n            || !browser.supportsLocalCandidateRttStatistics()) {\n            return;\n        }\n\n        // Maps a region to the PCMonitor instance for that region.\n        this.pcMonitors = {};\n\n        this.startPCMonitors = this.startPCMonitors.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n        this.stop = this.stop.bind(this);\n\n        this.analyticsInterval = null;\n        this.stopped = false;\n\n        const initialDelay = config.initialDelay || 60000;\n\n\n        logger.info(\n            `Starting RTT monitor with an initial delay of ${initialDelay}`);\n\n\n        window.setTimeout(\n            () => this.startPCMonitors(config),\n            initialDelay);\n    }\n\n    /**\n     * Starts the PCMonitors according to the configuration.\n     */\n    startPCMonitors(config) {\n        if (!config.stunServers) {\n            logger.warn('No stun servers configured.');\n\n            return;\n        }\n\n        if (this.stopped) {\n            return;\n        }\n\n        const getStatsIntervalMs\n            = config.getStatsInterval || stunKeepAliveIntervalMs;\n        const analyticsIntervalMs\n            = config.analyticsInterval || getStatsIntervalMs;\n        const count = Object.keys(config.stunServers).length;\n        const offset = getStatsIntervalMs / count;\n\n        // We delay the initialization of each PC so that they are uniformly\n        // distributed across the getStatsIntervalMs.\n        let i = 0;\n\n        for (const region in config.stunServers) {\n            if (config.stunServers.hasOwnProperty(region)) {\n                const address = config.stunServers[region];\n\n                this.pcMonitors[region]\n                    = new PCMonitor(\n                        region,\n                        address,\n                        getStatsIntervalMs,\n                        offset * i);\n                i++;\n            }\n        }\n\n        window.setTimeout(\n            () => {\n                if (!this.stopped) {\n                    this.analyticsInterval\n                        = window.setInterval(\n                        this.sendAnalytics, analyticsIntervalMs);\n                }\n            },\n            1000);\n    }\n\n    /**\n     * Sends an analytics event with the measured RTT to each region/STUN\n     * server.\n     */\n    sendAnalytics() {\n        const rtts = {};\n\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                const rtt = this.pcMonitors[region].rtt;\n\n                if (!isNaN(rtt) && rtt !== Infinity) {\n                    rtts[region.replace('-', '_')] = rtt;\n                }\n            }\n        }\n\n        if (rtts) {\n            Statistics.sendAnalytics(createRttByRegionEvent(rtts));\n        }\n    }\n\n    /**\n     * Stops this RttMonitor, clearing all intervals and closing all\n     * PeerConnections.\n     */\n    stop() {\n        logger.info('Stopping RttMonitor.');\n        this.stopped = true;\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                this.pcMonitors[region].stop();\n            }\n        }\n        this.pcMonitors = {};\n\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n}\n","/* global __filename */\nimport isEqual from 'lodash.isequal';\n\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport Statistics from './statistics';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport SpeakerStats from './SpeakerStats';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio the the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTC from '../RTC/RTC';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            // FIXME: remove once the temporary code below is gone from\n            //  TraceablePeerConnection.\n            // TraceablePeerConnection:359\n            //  this.rtc.conference.on(\n            //         TRACK_ADDED,\n            //         maybeSetSenderVideoConstraints);\n            //     this.rtc.conference.on(\n            //         TRACK_MUTE_CHANGED,\n            //         maybeSetSenderVideoConstraints);\n            // eslint-disable-next-line no-empty-function\n            on: () => {}\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n                if (!bLine.ssrcGroups) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            if (!mLine.sources) {\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n\n                // check if there is a m-line that is inactive and is of the same media type\n                const inactiveMid = currentDesc.media\n                    .findIndex(cmLine => cmLine.direction\n                        && cmLine.direction === 'inactive'\n                        && cmLine.type === type);\n\n                if (inactiveMid > -1) {\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\n                } else {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = currentDesc.media.length.toString();\n                    newMline.direction = 'sendonly';\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    currentDesc.media.push(newMline);\n                }\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './interop';\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport AuthUtil from './modules/util/AuthUtil';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport Logger from 'jitsi-meet-logger';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport Statistics from './modules/statistics/statistics';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {object} options.desktopSharingExtensionExternalInstallation -\n     * enables external installation process for desktop sharing extension if\n     * the inline installation is not posible. The following properties should\n     * be provided:\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        if (firePermissionPromptIsShownEvent === true) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                        browser.getName());\n                }\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = options.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        options.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            options,\n                            undefined,\n                            originalOptions || Object.assign({}, options));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'chrome_extension_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Make sure that we ALWAYS add the conference flag to the remote\n        // description: That flag is deprecated but, as of this writing\n        // (09/2019), it's still used in jitsi-meet to enable legacy simulcast\n        // when screen-sharing (https://cs.chromium.org/chromium/src/third_party/webrtc/media/base/media_channel.h?rcl=f2773b54647633d5725fa25dea883f99dd1b400c&l=838).\n        //\n        // We've observed the following chain of events that almost always\n        // results in connectivity issues at the receiver:\n        //\n        // 1. The user joins a call with startVideoMuted=true, so there's no\n        //    jitsi track created.\n        // 2. The user enables screen-sharing. At this point we do a\n        //    renegotiation (which starts with an sRD); the ssrcCache is empty,\n        //    so the conference flag is not added to the remote description SDP.\n        // 3. The next step of the re-negotiation is to set the answer, so\n        //    mungeLocalDescription is called, and because now we have a track\n        //    due to the user enabling screen-sharing, it enables simulcast.\n        // 4. sLD is called with simulcast ssrcs, but the sRD call of step 2\n        //    didn't add the conference flag in the SDP, so the screen-sharing\n        //    is without simulcast.\n        // 5. Any subsequent re-negotiation (for example, due to a participant\n        //    joining/leaving the call) will enable simulcast and this switch\n        //    almost always results in a broken stream at the receiver.\n        if (!self.options.usesUnifiedPlan) {\n            assertGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\t// FIXME add a check for proto/connection state DISCONNECTED\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst TranscriptionService = require('./AbstractTranscriptionService');\nconst Word = require('../word');\nconst audioRecorder = require('./../audioRecorder');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        cb(modifiedEvent);\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  const {navigator} = window;\n\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (navigator.mediaDevices &&\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n    result.browser = 'edge';\n    result.version = extractVersion(navigator.userAgent,\n        /Edge\\/(\\d+).(\\d+)$/, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const browserDetails = utils.detectBrowser(window);\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const addIceCandidateNullSupported =\n    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!addIceCandidateNullSupported && !arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions. Native support planned for Chrome M77.\n      if (browserDetails.version < 78 &&\n        arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\nexport function fixNegotiationNeeded(window) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (pc.signalingState !== 'stable') {\n      return;\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  const shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\n  };\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window) {\n  if (!('getDisplayMedia' in window.navigator)) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    window.navigator.getDisplayMedia.bind(window.navigator);\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nimport {filterIceServers} from './filtericeservers';\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (window.RTCIceGatherer) {\n    if (!window.RTCIceCandidate) {\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\n        return args;\n      };\n    }\n    if (!window.RTCSessionDescription) {\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\n        return args;\n      };\n    }\n    // this adds an additional event listener to MediaStrackTrack that signals\n    // when a tracks enabled property was changed. Workaround for a bug in\n    // addStream, see below. No longer required in 15025+\n    if (browserDetails.version < 15025) {\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\n          window.MediaStreamTrack.prototype, 'enabled');\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n        set(value) {\n          origMSTEnabled.set.call(this, value);\n          const ev = new Event('enabled');\n          ev.enabled = value;\n          this.dispatchEvent(ev);\n        }\n      });\n    }\n  }\n\n  // ORTC defines the DTMF sender a bit different.\n  // https://github.com/w3c/ortc/issues/714\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = new window.RTCDtmfSender(this);\n          } else if (this.track.kind === 'video') {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n  // Edge currently only implements the RTCDtmfSender, not the\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\n    window.RTCDTMFSender = window.RTCDtmfSender;\n  }\n\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\n      browserDetails.version);\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\n    if (config && config.iceServers) {\n      config.iceServers = filterIceServers(config.iceServers,\n        browserDetails.version);\n      utils.log('ICE servers after filtering:', config.iceServers);\n    }\n    return new RTCPeerConnectionShim(config);\n  };\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\n}\n\nexport function shimReplaceTrack(window) {\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n  if (window.RTCRtpSender &&\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\n    window.RTCRtpSender.prototype.replaceTrack =\n        window.RTCRtpSender.prototype.setTrack;\n  }\n}\n","/*\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nexport function filterIceServers(iceServers, edgeVersion) {\n  let hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(server => {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n      }\n      const isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(url => {\n        // filter STUN unconditionally.\n        if (url.indexOf('stun:') === 0) {\n          return false;\n        }\n\n        const validTurn = url.startsWith('turn') &&\n            !url.startsWith('turn:[') &&\n            url.includes('transport=udp');\n        if (validTurn && !hasTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return validTurn && !hasTurn;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window) {\n  const browserDetails = utils.detectBrowser(window);\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  // as well as ignoring {sdpMid, candidate: \"\"}\n  if (browserDetails.version < 68) {\n    const nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      if (arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params)) {\n            params.encodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(\n              sender.setParameters(params)\n              .catch(() => {})\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track) {\n        const stream = arguments[1];\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (!this._localStreams.includes(stream)) {\n            this._localStreams.push(stream);\n          }\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in window.RTCPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeAllowExtmapMixed(window) {\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      desc.sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter = adapterFactory({window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as edgeShim from './edge/edge_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimEdge: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n      chromeShim.shimGetStats(window);\n      chromeShim.shimSenderReceiverGetStats(window);\n      chromeShim.fixNegotiationNeeded(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n      firefoxShim.shimRemoveStream(window);\n      firefoxShim.shimSenderGetStats(window);\n      firefoxShim.shimReceiverGetStats(window);\n      firefoxShim.shimRTCDataChannel(window);\n      firefoxShim.shimAddTransceiver(window);\n      firefoxShim.shimCreateOffer(window);\n      firefoxShim.shimCreateAnswer(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimGetDisplayMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCreateOfferLegacy(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}